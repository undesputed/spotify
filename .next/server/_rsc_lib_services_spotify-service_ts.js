/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_services_spotify-service_ts";
exports.ids = ["_rsc_lib_services_spotify-service_ts"];
exports.modules = {

/***/ "(rsc)/./lib/services/spotify-service.ts":
/*!*****************************************!*\
  !*** ./lib/services/spotify-service.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpotifyService: () => (/* binding */ SpotifyService),\n/* harmony export */   spotifyService: () => (/* binding */ spotifyService)\n/* harmony export */ });\n/* harmony import */ var spotify_web_api_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! spotify-web-api-node */ \"(rsc)/./node_modules/spotify-web-api-node/src/server.js\");\n/* harmony import */ var spotify_web_api_node__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(spotify_web_api_node__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase/service */ \"(rsc)/./lib/supabase/service.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\");\n\n\n\nclass SpotifyService {\n    constructor(){\n        this.accessToken = null;\n        this.refreshToken = null;\n        this.expiresAt = null;\n        this.spotifyApi = new (spotify_web_api_node__WEBPACK_IMPORTED_MODULE_0___default())({\n            clientId: process.env.SPOTIFY_CLIENT_ID,\n            clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n            redirectUri: `${\"https://3d686033c4c8.ngrok-free.app\"}/api/auth/spotify/callback`\n        });\n    }\n    // Initialize with user tokens\n    async initialize(userId) {\n        try {\n            const userServices = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.getUserServices(userId);\n            const spotifyService = userServices.find((s)=>s.service_id === 'spotify');\n            if (!spotifyService || !spotifyService.access_token) {\n                return false;\n            }\n            this.accessToken = spotifyService.access_token;\n            this.refreshToken = spotifyService.refresh_token;\n            this.expiresAt = spotifyService.expires_at ? new Date(spotifyService.expires_at).getTime() : null;\n            this.spotifyApi.setAccessToken(this.accessToken);\n            // Refresh token if expired\n            if (this.expiresAt && Date.now() >= this.expiresAt) {\n                await this.refreshAccessToken(userId);\n            }\n            return true;\n        } catch (error) {\n            console.error('Failed to initialize Spotify service:', error);\n            return false;\n        }\n    }\n    // Refresh access token\n    async refreshAccessToken(userId) {\n        if (!this.refreshToken) throw new Error('No refresh token available');\n        try {\n            this.spotifyApi.setRefreshToken(this.refreshToken);\n            const { body } = await this.spotifyApi.refreshAccessToken();\n            this.accessToken = body.access_token;\n            this.expiresAt = Date.now() + body.expires_in * 1000;\n            this.spotifyApi.setAccessToken(this.accessToken);\n            // Update tokens in database\n            await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.connectService({\n                user_id: userId,\n                service_id: 'spotify',\n                access_token: this.accessToken,\n                refresh_token: this.refreshToken,\n                expires_at: new Date(this.expiresAt).toISOString(),\n                is_active: true\n            });\n        } catch (error) {\n            console.error('Failed to refresh Spotify access token:', error);\n            throw error;\n        }\n    }\n    // Get authorization URL for OAuth\n    getAuthorizationUrl(state) {\n        const scopes = [\n            'user-read-private',\n            'user-read-email',\n            'user-library-read',\n            'user-library-modify',\n            'playlist-read-private',\n            'playlist-read-collaborative',\n            'playlist-modify-public',\n            'playlist-modify-private',\n            'user-read-playback-state',\n            'user-modify-playback-state',\n            'user-read-currently-playing',\n            'user-read-recently-played',\n            'user-top-read',\n            'streaming'\n        ];\n        return this.spotifyApi.createAuthorizeURL(scopes, state || 'state');\n    }\n    // Handle OAuth callback\n    async handleCallback(code, userId) {\n        try {\n            const { body } = await this.spotifyApi.authorizationCodeGrant(code);\n            this.accessToken = body.access_token;\n            this.refreshToken = body.refresh_token;\n            this.expiresAt = Date.now() + body.expires_in * 1000;\n            // Get user profile\n            this.spotifyApi.setAccessToken(this.accessToken);\n            const { body: profile } = await this.spotifyApi.getMe();\n            // Save to database using server-side service (bypasses RLS)\n            await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__.supabaseServerService.connectService({\n                user_id: userId,\n                service_id: 'spotify',\n                access_token: this.accessToken,\n                refresh_token: this.refreshToken,\n                expires_at: new Date(this.expiresAt).toISOString(),\n                is_active: true,\n                service_user_id: profile.id,\n                service_username: profile.display_name || profile.id\n            });\n        } catch (error) {\n            console.error('Failed to handle Spotify callback:', error);\n            throw error;\n        }\n    }\n    // Search tracks\n    async searchTracks(query, limit = 20) {\n        try {\n            const { body } = await this.spotifyApi.searchTracks(query, {\n                limit\n            });\n            return await Promise.all(body.tracks?.items.map((track)=>this.mapSpotifyTrack(track)) || []);\n        } catch (error) {\n            console.error('Failed to search Spotify tracks:', error);\n            return [];\n        }\n    }\n    // Get user's saved tracks\n    async getLikedTracks(limit = 50, offset = 0) {\n        try {\n            const { body } = await this.spotifyApi.getMySavedTracks({\n                limit,\n                offset\n            });\n            return await Promise.all(body.items.map((item)=>this.mapSpotifyTrack(item.track)));\n        } catch (error) {\n            console.error('Failed to get liked tracks:', error);\n            return [];\n        }\n    }\n    // Get user's playlists\n    async getUserPlaylists(limit = 50, offset = 0) {\n        try {\n            const { body } = await this.spotifyApi.getUserPlaylists({\n                limit,\n                offset\n            });\n            return await Promise.all(body.items.map((playlist)=>this.mapSpotifyPlaylist(playlist)));\n        } catch (error) {\n            console.error('Failed to get user playlists:', error);\n            return [];\n        }\n    }\n    // Get playlist tracks\n    async getPlaylistTracks(playlistId) {\n        try {\n            const { body } = await this.spotifyApi.getPlaylistTracks(playlistId);\n            return await Promise.all(body.items.filter((item)=>item.track).map((item)=>this.mapSpotifyTrack(item.track)));\n        } catch (error) {\n            console.error('Failed to get playlist tracks:', error);\n            return [];\n        }\n    }\n    // Get user's top tracks\n    async getTopTracks(limit = 20) {\n        try {\n            const { body } = await this.spotifyApi.getMyTopTracks({\n                limit\n            });\n            return await Promise.all(body.items.map((track)=>this.mapSpotifyTrack(track)));\n        } catch (error) {\n            console.error('Failed to get top tracks:', error);\n            return [];\n        }\n    }\n    // Get recently played tracks\n    async getRecentlyPlayed(limit = 20) {\n        try {\n            const { body } = await this.spotifyApi.getMyRecentlyPlayedTracks({\n                limit\n            });\n            return await Promise.all(body.items.map((item)=>this.mapSpotifyTrack(item.track)));\n        } catch (error) {\n            console.error('Failed to get recently played tracks:', error);\n            return [];\n        }\n    }\n    // Get recommendations\n    async getRecommendations(seedTracks, seedArtists, seedGenres, limit = 20) {\n        try {\n            const { body } = await this.spotifyApi.getRecommendations({\n                seed_tracks: seedTracks?.slice(0, 5),\n                seed_artists: seedArtists?.slice(0, 5),\n                seed_genres: seedGenres?.slice(0, 5),\n                limit\n            });\n            return await Promise.all(body.tracks.map((track)=>this.mapSpotifyTrack(track)));\n        } catch (error) {\n            console.error('Failed to get recommendations:', error);\n            return [];\n        }\n    }\n    // Get track details\n    async getTrack(trackId) {\n        try {\n            const { body } = await this.spotifyApi.getTrack(trackId);\n            return await this.mapSpotifyTrack(body);\n        } catch (error) {\n            console.error('Failed to get track:', error);\n            return null;\n        }\n    }\n    // Get album details\n    async getAlbum(albumId) {\n        try {\n            const { body } = await this.spotifyApi.getAlbum(albumId);\n            return await this.mapSpotifyAlbum(body);\n        } catch (error) {\n            console.error('Failed to get album:', error);\n            return null;\n        }\n    }\n    // Get artist details\n    async getArtist(artistId) {\n        try {\n            const { body } = await this.spotifyApi.getArtist(artistId);\n            return await this.mapSpotifyArtist(body);\n        } catch (error) {\n            console.error('Failed to get artist:', error);\n            return null;\n        }\n    }\n    // Map Spotify track to unified format\n    async mapSpotifyTrack(track) {\n        try {\n            // Check if track exists in our database\n            let supabaseTrack = await this.findOrCreateTrack(track);\n            return {\n                id: supabaseTrack.id,\n                title: track.name,\n                artist: await this.mapSpotifyArtist(track.artists[0]),\n                album: await this.mapSpotifyAlbum(track.album),\n                duration: track.duration_ms / 1000,\n                streamUrl: `spotify:track:${track.id}`,\n                previewUrl: track.preview_url || undefined,\n                isLiked: false,\n                playCount: 0,\n                artwork: track.album.images && track.album.images.length > 0 ? track.album.images[0].url : '',\n                genres: [],\n                releaseDate: track.album.release_date,\n                serviceId: 'spotify',\n                originalId: track.id,\n                availableServices: [\n                    'spotify'\n                ],\n                quality: 'high'\n            };\n        } catch (error) {\n            console.error('Error mapping Spotify track:', error);\n            // Return a minimal track object\n            return {\n                id: track.id,\n                title: track.name,\n                artist: {\n                    id: track.artists[0]?.id || 'unknown',\n                    name: track.artists[0]?.name || 'Unknown Artist',\n                    image: '',\n                    followers: 0,\n                    isFollowed: false,\n                    genres: [],\n                    serviceId: 'spotify',\n                    originalId: track.artists[0]?.id || 'unknown',\n                    availableServices: [\n                        'spotify'\n                    ]\n                },\n                album: {\n                    id: track.album?.id || 'unknown',\n                    title: track.album?.name || 'Unknown Album',\n                    artist: {\n                        id: track.artists[0]?.id || 'unknown',\n                        name: track.artists[0]?.name || 'Unknown Artist',\n                        image: '',\n                        followers: 0,\n                        isFollowed: false,\n                        genres: [],\n                        serviceId: 'spotify',\n                        originalId: track.artists[0]?.id || 'unknown',\n                        availableServices: [\n                            'spotify'\n                        ]\n                    },\n                    artwork: track.album?.images && track.album.images.length > 0 ? track.album.images[0].url : '',\n                    releaseDate: track.album?.release_date || '',\n                    tracks: [],\n                    totalTracks: track.album?.total_tracks || 0,\n                    duration: 0,\n                    genres: [],\n                    type: 'album',\n                    serviceId: 'spotify',\n                    originalId: track.album?.id || 'unknown',\n                    availableServices: [\n                        'spotify'\n                    ]\n                },\n                duration: track.duration_ms / 1000,\n                streamUrl: `spotify:track:${track.id}`,\n                previewUrl: track.preview_url || undefined,\n                isLiked: false,\n                playCount: 0,\n                artwork: track.album?.images && track.album.images.length > 0 ? track.album.images[0].url : '',\n                genres: [],\n                releaseDate: track.album?.release_date || '',\n                serviceId: 'spotify',\n                originalId: track.id,\n                availableServices: [\n                    'spotify'\n                ],\n                quality: 'high'\n            };\n        }\n    }\n    // Map Spotify artist to unified format\n    async mapSpotifyArtist(artist) {\n        // Check if artist exists in our database\n        let supabaseArtist = await this.findOrCreateArtist(artist);\n        return {\n            id: supabaseArtist.id,\n            name: artist.name,\n            image: artist.images[0]?.url || '',\n            followers: artist.followers?.total || 0,\n            isFollowed: false,\n            genres: artist.genres || [],\n            bio: undefined,\n            serviceId: 'spotify',\n            originalId: artist.id,\n            availableServices: [\n                'spotify'\n            ]\n        };\n    }\n    // Map Spotify album to unified format\n    async mapSpotifyAlbum(album) {\n        // Check if album exists in our database\n        let supabaseAlbum = await this.findOrCreateAlbum(album);\n        return {\n            id: supabaseAlbum.id,\n            title: album.name,\n            artist: await this.mapSpotifyArtist(album.artists[0]),\n            artwork: album.images[0]?.url || '',\n            releaseDate: album.release_date,\n            tracks: [],\n            totalTracks: album.total_tracks,\n            duration: 0,\n            genres: album.genres || [],\n            type: album.album_type,\n            serviceId: 'spotify',\n            originalId: album.id,\n            availableServices: [\n                'spotify'\n            ]\n        };\n    }\n    // Map Spotify playlist to unified format\n    async mapSpotifyPlaylist(playlist) {\n        return {\n            id: playlist.id,\n            title: playlist.name,\n            description: playlist.description || undefined,\n            creator: {\n                id: playlist.owner.id,\n                name: playlist.owner.display_name || playlist.owner.id,\n                image: undefined\n            },\n            tracks: [],\n            artwork: playlist.images[0]?.url || '',\n            isPublic: playlist.public,\n            isLiked: false,\n            followers: playlist.followers?.total || 0,\n            createdAt: playlist.created_at,\n            updatedAt: new Date().toISOString(),\n            serviceId: 'spotify',\n            originalId: playlist.id,\n            availableServices: [\n                'spotify'\n            ]\n        };\n    }\n    // Find or create track in database\n    async findOrCreateTrack(track) {\n        try {\n            // First try to find by ISRC\n            if (track.external_ids?.isrc) {\n                const existingTrack = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.searchTracks(track.external_ids.isrc, 1);\n                if (existingTrack.length > 0) {\n                    return existingTrack[0];\n                }\n            }\n            // Create new track\n            const artist = await this.findOrCreateArtist(track.artists[0]);\n            const album = await this.findOrCreateAlbum(track.album);\n            const newTrack = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.createTrack({\n                title: track.name,\n                artist_id: artist.id,\n                album_id: album.id,\n                duration: Math.floor(track.duration_ms / 1000),\n                track_number: track.track_number,\n                disc_number: track.disc_number,\n                isrc: track.external_ids?.isrc || null,\n                external_url: track.external_urls?.spotify || null\n            });\n            // Add Spotify service mapping\n            await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.addTrackService({\n                track_id: newTrack.id,\n                service_id: 'spotify',\n                service_track_id: track.id,\n                stream_url: `spotify:track:${track.id}`,\n                preview_url: track.preview_url || null,\n                quality: 'high',\n                is_available: true\n            });\n            return newTrack;\n        } catch (error) {\n            console.error('Error creating track:', error);\n            // Return a mock track object if database creation fails\n            return {\n                id: `mock-track-${track.id}`,\n                title: track.name,\n                artist_id: `mock-${track.artists[0].id}`,\n                album_id: `mock-album-${track.album.id}`,\n                duration: Math.floor(track.duration_ms / 1000),\n                track_number: track.track_number,\n                disc_number: track.disc_number,\n                isrc: track.external_ids?.isrc || null,\n                external_url: track.external_urls?.spotify || null,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n    }\n    // Find or create artist in database\n    async findOrCreateArtist(artist) {\n        try {\n            const existingArtists = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.searchArtists(artist.name, 1);\n            if (existingArtists.length > 0) {\n                return existingArtists[0];\n            }\n            return await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.createArtist({\n                name: artist.name,\n                image_url: artist.images && artist.images.length > 0 ? artist.images[0].url : null,\n                bio: null,\n                genres: artist.genres || [],\n                external_url: artist.external_urls?.spotify || null\n            });\n        } catch (error) {\n            console.error('Error mapping Spotify track:', error);\n            // Return a mock artist object if database creation fails\n            return {\n                id: `mock-${artist.id}`,\n                name: artist.name,\n                image_url: artist.images && artist.images.length > 0 ? artist.images[0].url : null,\n                bio: null,\n                genres: artist.genres || [],\n                external_url: artist.external_urls?.spotify || null,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n    }\n    // Find or create album in database\n    async findOrCreateAlbum(album) {\n        try {\n            const existingAlbums = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.searchAlbums(album.name, 1);\n            if (existingAlbums.length > 0) {\n                return existingAlbums[0];\n            }\n            const artist = await this.findOrCreateArtist(album.artists[0]);\n            return await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.createAlbum({\n                title: album.name,\n                artist_id: artist.id,\n                artwork_url: album.images && album.images.length > 0 ? album.images[0].url : null,\n                release_date: album.release_date,\n                total_tracks: album.total_tracks,\n                duration: 0,\n                genres: album.genres || [],\n                album_type: album.album_type,\n                external_url: album.external_urls?.spotify || null\n            });\n        } catch (error) {\n            console.error('Error creating album:', error);\n            // Return a mock album object if database creation fails\n            return {\n                id: `mock-album-${album.id}`,\n                title: album.name,\n                artist_id: `mock-${album.artists[0].id}`,\n                artwork_url: album.images && album.images.length > 0 ? album.images[0].url : null,\n                release_date: album.release_date,\n                total_tracks: album.total_tracks,\n                duration: 0,\n                genres: album.genres || [],\n                album_type: album.album_type,\n                external_url: album.external_urls?.spotify || null,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n    }\n    // Add track service mapping (helper method)\n    async addTrackService(trackService) {\n        // This would be implemented in the SupabaseService\n        // For now, we'll use the direct Supabase client\n        const { createClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\"));\n        const supabase = await createClient();\n        await supabase.from('track_services').insert(trackService);\n    }\n    // Helper methods for SupabaseService (these would be added to the service)\n    async createTrack(trackData) {\n        const { createClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\"));\n        const supabase = await createClient();\n        const { data, error } = await supabase.from('tracks').insert(trackData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async createArtist(artistData) {\n        const { createClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\"));\n        const supabase = await createClient();\n        const { data, error } = await supabase.from('artists').insert(artistData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async createAlbum(albumData) {\n        const { createClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\"));\n        const supabase = await createClient();\n        const { data, error } = await supabase.from('albums').insert(albumData).select().single();\n        if (error) throw error;\n        return data;\n    }\n}\n// Export singleton instance\nconst spotifyService = new SpotifyService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/spotify-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase/client.ts":
/*!********************************!*\
  !*** ./lib/supabase/client.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ createClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\nfunction createClient() {\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createBrowserClient)(\"https://nvwrmmuyzxanjvsadtfh.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52d3JtbXV5enhhbmp2c2FkdGZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3MjgzNjQsImV4cCI6MjA3MTMwNDM2NH0.8k1x6zfO0KO9ExeDKcPP4FbaCA-BezxJWGHnNJ0VhQU\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UvY2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1EO0FBRTVDLFNBQVNDO0lBQ2QsT0FBT0Qsa0VBQW1CQSxDQUN4QkUsMENBQW9DLEVBQ3BDQSxrTkFBeUM7QUFFN0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jYXJyaWV5dS9EZXNrdG9wL3Nwb3RpZnkvbGliL3N1cGFiYXNlL2NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVCcm93c2VyQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3NzcidcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudCgpIHtcbiAgcmV0dXJuIGNyZWF0ZUJyb3dzZXJDbGllbnQoXG4gICAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMISxcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSFcbiAgKVxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZUJyb3dzZXJDbGllbnQiLCJjcmVhdGVDbGllbnQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase/client.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase/service.ts":
/*!*********************************!*\
  !*** ./lib/supabase/service.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseService: () => (/* binding */ SupabaseService),\n/* harmony export */   supabaseService: () => (/* binding */ supabaseService)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/./lib/supabase/client.ts\");\n\nclass SupabaseService {\n    // =====================================================\n    // USER OPERATIONS\n    // =====================================================\n    async getCurrentUser() {\n        const { data: { user } } = await this.supabase.auth.getUser();\n        if (!user) return null;\n        const { data, error } = await this.supabase.from('users').select('*').eq('id', user.id).single();\n        if (error) throw error;\n        return data;\n    }\n    async createUser(userData) {\n        const { data, error } = await this.supabase.from('users').insert(userData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async updateUser(userId, updates) {\n        const { data, error } = await this.supabase.from('users').update(updates).eq('id', userId).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // ARTIST OPERATIONS\n    // =====================================================\n    async getArtists(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('artists').select('*').order('name').range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getArtist(id) {\n        const { data, error } = await this.supabase.from('artists').select('*').eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async searchArtists(query, limit = 20) {\n        const { data, error } = await this.supabase.from('artists').select('*').ilike('name', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    async createArtist(artistData) {\n        const { data, error } = await this.supabase.from('artists').insert(artistData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // ALBUM OPERATIONS\n    // =====================================================\n    async getAlbums(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*)\n      `).order('release_date', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getAlbum(id) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*),\n        tracks:tracks(*)\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async getAlbumsByArtist(artistId) {\n        const { data, error } = await this.supabase.from('albums').select('*').eq('artist_id', artistId).order('release_date', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async searchAlbums(query, limit = 20) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*)\n      `).ilike('title', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // TRACK OPERATIONS\n    // =====================================================\n    async getTracks(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*)\n      `).order('title').range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getTrack(id) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*),\n        track_services(*)\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async getTracksByAlbum(albumId) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*)\n      `).eq('album_id', albumId).order('track_number');\n        if (error) throw error;\n        return data;\n    }\n    async searchTracks(query, limit = 20) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*)\n      `).ilike('title', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    async createTrack(trackData) {\n        const { data, error } = await this.supabase.from('tracks').insert(trackData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getTrackServices(trackId) {\n        const { data, error } = await this.supabase.from('track_services').select('*').eq('track_id', trackId).eq('is_available', true);\n        if (error) throw error;\n        return data;\n    }\n    async addTrackService(trackServiceData) {\n        const { data, error } = await this.supabase.from('track_services').insert(trackServiceData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getBestStreamUrl(trackId, preferredQuality = 'high') {\n        const { data, error } = await this.supabase.from('track_services').select('stream_url, quality').eq('track_id', trackId).eq('is_available', true).order('quality', {\n            ascending: false\n        }).limit(1).single();\n        if (error) throw error;\n        return data?.stream_url || null;\n    }\n    // =====================================================\n    // PLAYLIST OPERATIONS\n    // =====================================================\n    async getPlaylists(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).eq('visibility', 'public').order('created_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getUserPlaylists(userId) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).eq('creator_id', userId).order('updated_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async getPlaylist(id) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*),\n        playlist_tracks(\n          position,\n          track:tracks(\n            *,\n            artist:artists(*),\n            album:albums(*)\n          )\n        )\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async createPlaylist(playlistData) {\n        const { data, error } = await this.supabase.from('playlists').insert(playlistData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async addTrackToPlaylist(playlistId, trackId, position) {\n        // Get the next position if not provided\n        if (!position) {\n            const { data: maxPosition } = await this.supabase.from('playlist_tracks').select('position').eq('playlist_id', playlistId).order('position', {\n                ascending: false\n            }).limit(1).single();\n            position = (maxPosition?.position || 0) + 1;\n        }\n        const { error } = await this.supabase.from('playlist_tracks').insert({\n            playlist_id: playlistId,\n            track_id: trackId,\n            position,\n            added_by: (await this.getCurrentUser())?.id || null\n        });\n        if (error) throw error;\n    }\n    // =====================================================\n    // USER LIBRARY OPERATIONS\n    // =====================================================\n    async getUserLibrary(userId) {\n        const { data, error } = await this.supabase.from('user_library').select(`\n        *,\n        track:tracks(\n          *,\n          artist:artists(*),\n          album:albums(*)\n        ),\n        album:albums(\n          *,\n          artist:artists(*)\n        ),\n        artist:artists(*),\n        playlist:playlists(\n          *,\n          creator:users!creator_id(*)\n        )\n      `).eq('user_id', userId).order('added_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async addToLibrary(libraryItem) {\n        const { data, error } = await this.supabase.from('user_library').insert(libraryItem).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async removeFromLibrary(userId, itemId, itemType) {\n        const { error } = await this.supabase.from('user_library').delete().eq('user_id', userId).eq(`${itemType}_id`, itemId);\n        if (error) throw error;\n    }\n    // =====================================================\n    // PLAY HISTORY OPERATIONS\n    // =====================================================\n    async addPlayHistory(historyItem) {\n        const { data, error } = await this.supabase.from('user_play_history').insert(historyItem).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getUserPlayHistory(userId, limit = 50) {\n        const { data, error } = await this.supabase.from('user_play_history').select(`\n        *,\n        track:tracks(\n          *,\n          artist:artists(*),\n          album:albums(*)\n        )\n      `).eq('user_id', userId).order('played_at', {\n            ascending: false\n        }).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // SERVICE CONNECTION OPERATIONS\n    // =====================================================\n    async getUserServices(userId) {\n        const { data, error } = await this.supabase.from('user_services').select('*').eq('user_id', userId).eq('is_active', true);\n        if (error) throw error;\n        return data;\n    }\n    async connectService(serviceData) {\n        const { data, error } = await this.supabase.from('user_services').upsert(serviceData, {\n            onConflict: 'user_id,service_id'\n        }).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async disconnectService(userId, serviceId) {\n        const { error } = await this.supabase.from('user_services').update({\n            is_active: false\n        }).eq('user_id', userId).eq('service_id', serviceId);\n        if (error) throw error;\n    }\n    // =====================================================\n    // SEARCH OPERATIONS\n    // =====================================================\n    async searchAll(query, limit = 20) {\n        const [tracks, albums, artists, playlists] = await Promise.all([\n            this.searchTracks(query, limit),\n            this.searchAlbums(query, limit),\n            this.searchArtists(query, limit),\n            this.searchPlaylists(query, limit)\n        ]);\n        return {\n            tracks,\n            albums,\n            artists,\n            playlists,\n            query,\n            total: tracks.length + albums.length + artists.length + playlists.length\n        };\n    }\n    async searchPlaylists(query, limit = 20) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).ilike('title', `%${query}%`).eq('visibility', 'public').limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    constructor(){\n        this.supabase = (0,_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    }\n}\n// Export a singleton instance\nconst supabaseService = new SupabaseService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase/service.ts\n");

/***/ }),

/***/ "?d272":
/*!********************************!*\
  !*** supports-color (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ })

};
;