/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/spotify/callback/route";
exports.ids = ["app/api/auth/spotify/callback/route"];
exports.modules = {

/***/ "(rsc)/./app/api/auth/spotify/callback/route.ts":
/*!************************************************!*\
  !*** ./app/api/auth/spotify/callback/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_spotify_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/spotify-service */ \"(rsc)/./lib/services/spotify-service.ts\");\n\n\nasync function GET(request) {\n    try {\n        const url = new URL(request.url);\n        const code = url.searchParams.get('code');\n        const state = url.searchParams.get('state');\n        const error = url.searchParams.get('error');\n        if (error) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(`${\"https://3d686033c4c8.ngrok-free.app\"}/auth?error=spotify_auth_failed`);\n        }\n        if (!code || !state) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(`${\"https://3d686033c4c8.ngrok-free.app\"}/auth?error=missing_params`);\n        }\n        // Decode state to get userId\n        const stateData = JSON.parse(Buffer.from(state, 'base64').toString());\n        const { userId } = stateData;\n        if (!userId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(`${\"https://3d686033c4c8.ngrok-free.app\"}/auth?error=invalid_state`);\n        }\n        // Handle the OAuth callback\n        await _lib_services_spotify_service__WEBPACK_IMPORTED_MODULE_1__.spotifyService.handleCallback(code, userId);\n        // Redirect back to platform connect page with success\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(`${\"https://3d686033c4c8.ngrok-free.app\"}/platforms/connect?platforms=spotify&success=spotify_connected`);\n    } catch (error) {\n        console.error('Spotify callback error:', error);\n        // Check if it's a service role key issue\n        if (error instanceof Error && error.message.includes('Service role key not configured')) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(`${\"https://3d686033c4c8.ngrok-free.app\"}/auth?error=service_role_key_missing`);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(`${\"https://3d686033c4c8.ngrok-free.app\"}/auth?error=callback_failed`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2F1dGgvc3BvdGlmeS9jYWxsYmFjay9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUQ7QUFDUTtBQUV4RCxlQUFlRSxJQUFJQyxPQUFvQjtJQUM1QyxJQUFJO1FBQ0YsTUFBTUMsTUFBTSxJQUFJQyxJQUFJRixRQUFRQyxHQUFHO1FBQy9CLE1BQU1FLE9BQU9GLElBQUlHLFlBQVksQ0FBQ0MsR0FBRyxDQUFDO1FBQ2xDLE1BQU1DLFFBQVFMLElBQUlHLFlBQVksQ0FBQ0MsR0FBRyxDQUFDO1FBQ25DLE1BQU1FLFFBQVFOLElBQUlHLFlBQVksQ0FBQ0MsR0FBRyxDQUFDO1FBRW5DLElBQUlFLE9BQU87WUFDVCxPQUFPVixxREFBWUEsQ0FBQ1csUUFBUSxDQUMxQixHQUFHQyxxQ0FBK0IsQ0FBQywrQkFBK0IsQ0FBQztRQUV2RTtRQUVBLElBQUksQ0FBQ04sUUFBUSxDQUFDRyxPQUFPO1lBQ25CLE9BQU9ULHFEQUFZQSxDQUFDVyxRQUFRLENBQzFCLEdBQUdDLHFDQUErQixDQUFDLDBCQUEwQixDQUFDO1FBRWxFO1FBRUEsNkJBQTZCO1FBQzdCLE1BQU1HLFlBQVlDLEtBQUtDLEtBQUssQ0FBQ0MsT0FBT0MsSUFBSSxDQUFDVixPQUFPLFVBQVVXLFFBQVE7UUFDbEUsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR047UUFFbkIsSUFBSSxDQUFDTSxRQUFRO1lBQ1gsT0FBT3JCLHFEQUFZQSxDQUFDVyxRQUFRLENBQzFCLEdBQUdDLHFDQUErQixDQUFDLHlCQUF5QixDQUFDO1FBRWpFO1FBRUEsNEJBQTRCO1FBQzVCLE1BQU1YLHlFQUFjQSxDQUFDcUIsY0FBYyxDQUFDaEIsTUFBTWU7UUFFMUMsc0RBQXNEO1FBQ3RELE9BQU9yQixxREFBWUEsQ0FBQ1csUUFBUSxDQUMxQixHQUFHQyxxQ0FBK0IsQ0FBQyw4REFBOEQsQ0FBQztJQUV0RyxFQUFFLE9BQU9GLE9BQU87UUFDZGEsUUFBUWIsS0FBSyxDQUFDLDJCQUEyQkE7UUFFekMseUNBQXlDO1FBQ3pDLElBQUlBLGlCQUFpQmMsU0FBU2QsTUFBTWUsT0FBTyxDQUFDQyxRQUFRLENBQUMsb0NBQW9DO1lBQ3ZGLE9BQU8xQixxREFBWUEsQ0FBQ1csUUFBUSxDQUMxQixHQUFHQyxxQ0FBK0IsQ0FBQyxvQ0FBb0MsQ0FBQztRQUU1RTtRQUVBLE9BQU9aLHFEQUFZQSxDQUFDVyxRQUFRLENBQzFCLEdBQUdDLHFDQUErQixDQUFDLDJCQUEyQixDQUFDO0lBRW5FO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jYXJyaWV5dS9EZXNrdG9wL3Nwb3RpZnkvYXBwL2FwaS9hdXRoL3Nwb3RpZnkvY2FsbGJhY2svcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHsgc3BvdGlmeVNlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9zcG90aWZ5LXNlcnZpY2UnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKVxuICAgIGNvbnN0IGNvZGUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnY29kZScpXG4gICAgY29uc3Qgc3RhdGUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnc3RhdGUnKVxuICAgIGNvbnN0IGVycm9yID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2Vycm9yJylcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChcbiAgICAgICAgYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTH0vYXV0aD9lcnJvcj1zcG90aWZ5X2F1dGhfZmFpbGVkYFxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICghY29kZSB8fCAhc3RhdGUpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UucmVkaXJlY3QoXG4gICAgICAgIGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9VUkx9L2F1dGg/ZXJyb3I9bWlzc2luZ19wYXJhbXNgXG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gRGVjb2RlIHN0YXRlIHRvIGdldCB1c2VySWRcbiAgICBjb25zdCBzdGF0ZURhdGEgPSBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKHN0YXRlLCAnYmFzZTY0JykudG9TdHJpbmcoKSlcbiAgICBjb25zdCB7IHVzZXJJZCB9ID0gc3RhdGVEYXRhXG5cbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChcbiAgICAgICAgYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTH0vYXV0aD9lcnJvcj1pbnZhbGlkX3N0YXRlYFxuICAgICAgKVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgT0F1dGggY2FsbGJhY2tcbiAgICBhd2FpdCBzcG90aWZ5U2VydmljZS5oYW5kbGVDYWxsYmFjayhjb2RlLCB1c2VySWQpXG5cbiAgICAvLyBSZWRpcmVjdCBiYWNrIHRvIHBsYXRmb3JtIGNvbm5lY3QgcGFnZSB3aXRoIHN1Y2Nlc3NcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLnJlZGlyZWN0KFxuICAgICAgYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTH0vcGxhdGZvcm1zL2Nvbm5lY3Q/cGxhdGZvcm1zPXNwb3RpZnkmc3VjY2Vzcz1zcG90aWZ5X2Nvbm5lY3RlZGBcbiAgICApXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignU3BvdGlmeSBjYWxsYmFjayBlcnJvcjonLCBlcnJvcilcbiAgICBcbiAgICAvLyBDaGVjayBpZiBpdCdzIGEgc2VydmljZSByb2xlIGtleSBpc3N1ZVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ1NlcnZpY2Ugcm9sZSBrZXkgbm90IGNvbmZpZ3VyZWQnKSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChcbiAgICAgICAgYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTH0vYXV0aD9lcnJvcj1zZXJ2aWNlX3JvbGVfa2V5X21pc3NpbmdgXG4gICAgICApXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UucmVkaXJlY3QoXG4gICAgICBgJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMfS9hdXRoP2Vycm9yPWNhbGxiYWNrX2ZhaWxlZGBcbiAgICApXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJzcG90aWZ5U2VydmljZSIsIkdFVCIsInJlcXVlc3QiLCJ1cmwiLCJVUkwiLCJjb2RlIiwic2VhcmNoUGFyYW1zIiwiZ2V0Iiwic3RhdGUiLCJlcnJvciIsInJlZGlyZWN0IiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQUF9VUkwiLCJzdGF0ZURhdGEiLCJKU09OIiwicGFyc2UiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJ1c2VySWQiLCJoYW5kbGVDYWxsYmFjayIsImNvbnNvbGUiLCJFcnJvciIsIm1lc3NhZ2UiLCJpbmNsdWRlcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/spotify/callback/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/spotify-service.ts":
/*!*****************************************!*\
  !*** ./lib/services/spotify-service.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpotifyService: () => (/* binding */ SpotifyService),\n/* harmony export */   spotifyService: () => (/* binding */ spotifyService)\n/* harmony export */ });\n/* harmony import */ var spotify_web_api_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! spotify-web-api-node */ \"(rsc)/./node_modules/spotify-web-api-node/src/server.js\");\n/* harmony import */ var spotify_web_api_node__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(spotify_web_api_node__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase/service */ \"(rsc)/./lib/supabase/service.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\");\n\n\n\nclass SpotifyService {\n    constructor(){\n        this.accessToken = null;\n        this.refreshToken = null;\n        this.expiresAt = null;\n        this.spotifyApi = new (spotify_web_api_node__WEBPACK_IMPORTED_MODULE_0___default())({\n            clientId: process.env.SPOTIFY_CLIENT_ID,\n            clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n            redirectUri: `${\"https://3d686033c4c8.ngrok-free.app\"}/api/auth/spotify/callback`\n        });\n    }\n    // Initialize with user tokens\n    async initialize(userId) {\n        try {\n            const userServices = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.getUserServices(userId);\n            const spotifyService = userServices.find((s)=>s.service_id === 'spotify');\n            if (!spotifyService || !spotifyService.access_token) {\n                return false;\n            }\n            this.accessToken = spotifyService.access_token;\n            this.refreshToken = spotifyService.refresh_token;\n            this.expiresAt = spotifyService.expires_at ? new Date(spotifyService.expires_at).getTime() : null;\n            this.spotifyApi.setAccessToken(this.accessToken);\n            // Refresh token if expired\n            if (this.expiresAt && Date.now() >= this.expiresAt) {\n                await this.refreshAccessToken(userId);\n            }\n            return true;\n        } catch (error) {\n            console.error('Failed to initialize Spotify service:', error);\n            return false;\n        }\n    }\n    // Refresh access token\n    async refreshAccessToken(userId) {\n        if (!this.refreshToken) throw new Error('No refresh token available');\n        try {\n            this.spotifyApi.setRefreshToken(this.refreshToken);\n            const { body } = await this.spotifyApi.refreshAccessToken();\n            this.accessToken = body.access_token;\n            this.expiresAt = Date.now() + body.expires_in * 1000;\n            this.spotifyApi.setAccessToken(this.accessToken);\n            // Update tokens in database\n            await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.connectService({\n                user_id: userId,\n                service_id: 'spotify',\n                access_token: this.accessToken,\n                refresh_token: this.refreshToken,\n                expires_at: new Date(this.expiresAt).toISOString(),\n                is_active: true\n            });\n        } catch (error) {\n            console.error('Failed to refresh Spotify access token:', error);\n            throw error;\n        }\n    }\n    // Get authorization URL for OAuth\n    getAuthorizationUrl(state) {\n        const scopes = [\n            'user-read-private',\n            'user-read-email',\n            'user-library-read',\n            'user-library-modify',\n            'playlist-read-private',\n            'playlist-read-collaborative',\n            'playlist-modify-public',\n            'playlist-modify-private',\n            'user-read-playback-state',\n            'user-modify-playback-state',\n            'user-read-currently-playing',\n            'user-read-recently-played',\n            'user-top-read',\n            'streaming'\n        ];\n        return this.spotifyApi.createAuthorizeURL(scopes, state || 'state');\n    }\n    // Handle OAuth callback\n    async handleCallback(code, userId) {\n        try {\n            const { body } = await this.spotifyApi.authorizationCodeGrant(code);\n            this.accessToken = body.access_token;\n            this.refreshToken = body.refresh_token;\n            this.expiresAt = Date.now() + body.expires_in * 1000;\n            // Get user profile\n            this.spotifyApi.setAccessToken(this.accessToken);\n            const { body: profile } = await this.spotifyApi.getMe();\n            // Save to database using server-side service (bypasses RLS)\n            await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__.supabaseServerService.connectService({\n                user_id: userId,\n                service_id: 'spotify',\n                access_token: this.accessToken,\n                refresh_token: this.refreshToken,\n                expires_at: new Date(this.expiresAt).toISOString(),\n                is_active: true,\n                service_user_id: profile.id,\n                service_username: profile.display_name || profile.id\n            });\n        } catch (error) {\n            console.error('Failed to handle Spotify callback:', error);\n            throw error;\n        }\n    }\n    // Search tracks\n    async searchTracks(query, limit = 20) {\n        try {\n            const { body } = await this.spotifyApi.searchTracks(query, {\n                limit\n            });\n            return await Promise.all(body.tracks?.items.map((track)=>this.mapSpotifyTrack(track)) || []);\n        } catch (error) {\n            console.error('Failed to search Spotify tracks:', error);\n            return [];\n        }\n    }\n    // Get user's saved tracks\n    async getLikedTracks(limit = 50, offset = 0) {\n        try {\n            const { body } = await this.spotifyApi.getMySavedTracks({\n                limit,\n                offset\n            });\n            return await Promise.all(body.items.map((item)=>this.mapSpotifyTrack(item.track)));\n        } catch (error) {\n            console.error('Failed to get liked tracks:', error);\n            return [];\n        }\n    }\n    // Get user's playlists\n    async getUserPlaylists(limit = 50, offset = 0) {\n        try {\n            const { body } = await this.spotifyApi.getUserPlaylists({\n                limit,\n                offset\n            });\n            return await Promise.all(body.items.map((playlist)=>this.mapSpotifyPlaylist(playlist)));\n        } catch (error) {\n            console.error('Failed to get user playlists:', error);\n            return [];\n        }\n    }\n    // Get playlist tracks\n    async getPlaylistTracks(playlistId) {\n        try {\n            const { body } = await this.spotifyApi.getPlaylistTracks(playlistId);\n            return await Promise.all(body.items.filter((item)=>item.track).map((item)=>this.mapSpotifyTrack(item.track)));\n        } catch (error) {\n            console.error('Failed to get playlist tracks:', error);\n            return [];\n        }\n    }\n    // Get user's top tracks\n    async getTopTracks(limit = 20) {\n        try {\n            const { body } = await this.spotifyApi.getMyTopTracks({\n                limit\n            });\n            return await Promise.all(body.items.map((track)=>this.mapSpotifyTrack(track)));\n        } catch (error) {\n            console.error('Failed to get top tracks:', error);\n            return [];\n        }\n    }\n    // Get recently played tracks\n    async getRecentlyPlayed(limit = 20) {\n        try {\n            const { body } = await this.spotifyApi.getMyRecentlyPlayedTracks({\n                limit\n            });\n            return await Promise.all(body.items.map((item)=>this.mapSpotifyTrack(item.track)));\n        } catch (error) {\n            console.error('Failed to get recently played tracks:', error);\n            return [];\n        }\n    }\n    // Get recommendations\n    async getRecommendations(seedTracks, seedArtists, seedGenres, limit = 20) {\n        try {\n            const { body } = await this.spotifyApi.getRecommendations({\n                seed_tracks: seedTracks?.slice(0, 5),\n                seed_artists: seedArtists?.slice(0, 5),\n                seed_genres: seedGenres?.slice(0, 5),\n                limit\n            });\n            return await Promise.all(body.tracks.map((track)=>this.mapSpotifyTrack(track)));\n        } catch (error) {\n            console.error('Failed to get recommendations:', error);\n            return [];\n        }\n    }\n    // Get track details\n    async getTrack(trackId) {\n        try {\n            const { body } = await this.spotifyApi.getTrack(trackId);\n            return await this.mapSpotifyTrack(body);\n        } catch (error) {\n            console.error('Failed to get track:', error);\n            return null;\n        }\n    }\n    // Get album details\n    async getAlbum(albumId) {\n        try {\n            const { body } = await this.spotifyApi.getAlbum(albumId);\n            return await this.mapSpotifyAlbum(body);\n        } catch (error) {\n            console.error('Failed to get album:', error);\n            return null;\n        }\n    }\n    // Get artist details\n    async getArtist(artistId) {\n        try {\n            const { body } = await this.spotifyApi.getArtist(artistId);\n            return await this.mapSpotifyArtist(body);\n        } catch (error) {\n            console.error('Failed to get artist:', error);\n            return null;\n        }\n    }\n    // Map Spotify track to unified format\n    async mapSpotifyTrack(track) {\n        try {\n            // Check if track exists in our database\n            let supabaseTrack = await this.findOrCreateTrack(track);\n            return {\n                id: supabaseTrack.id,\n                title: track.name,\n                artist: await this.mapSpotifyArtist(track.artists[0]),\n                album: await this.mapSpotifyAlbum(track.album),\n                duration: track.duration_ms / 1000,\n                streamUrl: `spotify:track:${track.id}`,\n                previewUrl: track.preview_url || undefined,\n                isLiked: false,\n                playCount: 0,\n                artwork: track.album.images && track.album.images.length > 0 ? track.album.images[0].url : '',\n                genres: [],\n                releaseDate: track.album.release_date,\n                serviceId: 'spotify',\n                originalId: track.id,\n                availableServices: [\n                    'spotify'\n                ],\n                quality: 'high'\n            };\n        } catch (error) {\n            console.error('Error mapping Spotify track:', error);\n            // Return a minimal track object\n            return {\n                id: track.id,\n                title: track.name,\n                artist: {\n                    id: track.artists[0]?.id || 'unknown',\n                    name: track.artists[0]?.name || 'Unknown Artist',\n                    image: '',\n                    followers: 0,\n                    isFollowed: false,\n                    genres: [],\n                    serviceId: 'spotify',\n                    originalId: track.artists[0]?.id || 'unknown',\n                    availableServices: [\n                        'spotify'\n                    ]\n                },\n                album: {\n                    id: track.album?.id || 'unknown',\n                    title: track.album?.name || 'Unknown Album',\n                    artist: {\n                        id: track.artists[0]?.id || 'unknown',\n                        name: track.artists[0]?.name || 'Unknown Artist',\n                        image: '',\n                        followers: 0,\n                        isFollowed: false,\n                        genres: [],\n                        serviceId: 'spotify',\n                        originalId: track.artists[0]?.id || 'unknown',\n                        availableServices: [\n                            'spotify'\n                        ]\n                    },\n                    artwork: track.album?.images && track.album.images.length > 0 ? track.album.images[0].url : '',\n                    releaseDate: track.album?.release_date || '',\n                    tracks: [],\n                    totalTracks: track.album?.total_tracks || 0,\n                    duration: 0,\n                    genres: [],\n                    type: 'album',\n                    serviceId: 'spotify',\n                    originalId: track.album?.id || 'unknown',\n                    availableServices: [\n                        'spotify'\n                    ]\n                },\n                duration: track.duration_ms / 1000,\n                streamUrl: `spotify:track:${track.id}`,\n                previewUrl: track.preview_url || undefined,\n                isLiked: false,\n                playCount: 0,\n                artwork: track.album?.images && track.album.images.length > 0 ? track.album.images[0].url : '',\n                genres: [],\n                releaseDate: track.album?.release_date || '',\n                serviceId: 'spotify',\n                originalId: track.id,\n                availableServices: [\n                    'spotify'\n                ],\n                quality: 'high'\n            };\n        }\n    }\n    // Map Spotify artist to unified format\n    async mapSpotifyArtist(artist) {\n        // Check if artist exists in our database\n        let supabaseArtist = await this.findOrCreateArtist(artist);\n        return {\n            id: supabaseArtist.id,\n            name: artist.name,\n            image: artist.images[0]?.url || '',\n            followers: artist.followers?.total || 0,\n            isFollowed: false,\n            genres: artist.genres || [],\n            bio: undefined,\n            serviceId: 'spotify',\n            originalId: artist.id,\n            availableServices: [\n                'spotify'\n            ]\n        };\n    }\n    // Map Spotify album to unified format\n    async mapSpotifyAlbum(album) {\n        // Check if album exists in our database\n        let supabaseAlbum = await this.findOrCreateAlbum(album);\n        return {\n            id: supabaseAlbum.id,\n            title: album.name,\n            artist: await this.mapSpotifyArtist(album.artists[0]),\n            artwork: album.images[0]?.url || '',\n            releaseDate: album.release_date,\n            tracks: [],\n            totalTracks: album.total_tracks,\n            duration: 0,\n            genres: album.genres || [],\n            type: album.album_type,\n            serviceId: 'spotify',\n            originalId: album.id,\n            availableServices: [\n                'spotify'\n            ]\n        };\n    }\n    // Map Spotify playlist to unified format\n    async mapSpotifyPlaylist(playlist) {\n        return {\n            id: playlist.id,\n            title: playlist.name,\n            description: playlist.description || undefined,\n            creator: {\n                id: playlist.owner.id,\n                name: playlist.owner.display_name || playlist.owner.id,\n                image: undefined\n            },\n            tracks: [],\n            artwork: playlist.images[0]?.url || '',\n            isPublic: playlist.public,\n            isLiked: false,\n            followers: playlist.followers?.total || 0,\n            createdAt: playlist.created_at,\n            updatedAt: new Date().toISOString(),\n            serviceId: 'spotify',\n            originalId: playlist.id,\n            availableServices: [\n                'spotify'\n            ]\n        };\n    }\n    // Find or create track in database\n    async findOrCreateTrack(track) {\n        try {\n            // First try to find by ISRC\n            if (track.external_ids?.isrc) {\n                const existingTrack = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.searchTracks(track.external_ids.isrc, 1);\n                if (existingTrack.length > 0) {\n                    return existingTrack[0];\n                }\n            }\n            // Create new track\n            const artist = await this.findOrCreateArtist(track.artists[0]);\n            const album = await this.findOrCreateAlbum(track.album);\n            const newTrack = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.createTrack({\n                title: track.name,\n                artist_id: artist.id,\n                album_id: album.id,\n                duration: Math.floor(track.duration_ms / 1000),\n                track_number: track.track_number,\n                disc_number: track.disc_number,\n                isrc: track.external_ids?.isrc || null,\n                external_url: track.external_urls?.spotify || null\n            });\n            // Add Spotify service mapping\n            await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.addTrackService({\n                track_id: newTrack.id,\n                service_id: 'spotify',\n                service_track_id: track.id,\n                stream_url: `spotify:track:${track.id}`,\n                preview_url: track.preview_url || null,\n                quality: 'high',\n                is_available: true\n            });\n            return newTrack;\n        } catch (error) {\n            console.error('Error creating track:', error);\n            // Return a mock track object if database creation fails\n            return {\n                id: `mock-track-${track.id}`,\n                title: track.name,\n                artist_id: `mock-${track.artists[0].id}`,\n                album_id: `mock-album-${track.album.id}`,\n                duration: Math.floor(track.duration_ms / 1000),\n                track_number: track.track_number,\n                disc_number: track.disc_number,\n                isrc: track.external_ids?.isrc || null,\n                external_url: track.external_urls?.spotify || null,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n    }\n    // Find or create artist in database\n    async findOrCreateArtist(artist) {\n        try {\n            const existingArtists = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.searchArtists(artist.name, 1);\n            if (existingArtists.length > 0) {\n                return existingArtists[0];\n            }\n            return await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.createArtist({\n                name: artist.name,\n                image_url: artist.images && artist.images.length > 0 ? artist.images[0].url : null,\n                bio: null,\n                genres: artist.genres || [],\n                external_url: artist.external_urls?.spotify || null\n            });\n        } catch (error) {\n            console.error('Error mapping Spotify track:', error);\n            // Return a mock artist object if database creation fails\n            return {\n                id: `mock-${artist.id}`,\n                name: artist.name,\n                image_url: artist.images && artist.images.length > 0 ? artist.images[0].url : null,\n                bio: null,\n                genres: artist.genres || [],\n                external_url: artist.external_urls?.spotify || null,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n    }\n    // Find or create album in database\n    async findOrCreateAlbum(album) {\n        try {\n            const existingAlbums = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.searchAlbums(album.name, 1);\n            if (existingAlbums.length > 0) {\n                return existingAlbums[0];\n            }\n            const artist = await this.findOrCreateArtist(album.artists[0]);\n            return await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_1__.supabaseService.createAlbum({\n                title: album.name,\n                artist_id: artist.id,\n                artwork_url: album.images && album.images.length > 0 ? album.images[0].url : null,\n                release_date: album.release_date,\n                total_tracks: album.total_tracks,\n                duration: 0,\n                genres: album.genres || [],\n                album_type: album.album_type,\n                external_url: album.external_urls?.spotify || null\n            });\n        } catch (error) {\n            console.error('Error creating album:', error);\n            // Return a mock album object if database creation fails\n            return {\n                id: `mock-album-${album.id}`,\n                title: album.name,\n                artist_id: `mock-${album.artists[0].id}`,\n                artwork_url: album.images && album.images.length > 0 ? album.images[0].url : null,\n                release_date: album.release_date,\n                total_tracks: album.total_tracks,\n                duration: 0,\n                genres: album.genres || [],\n                album_type: album.album_type,\n                external_url: album.external_urls?.spotify || null,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n        }\n    }\n    // Add track service mapping (helper method)\n    async addTrackService(trackService) {\n        // This would be implemented in the SupabaseService\n        // For now, we'll use the direct Supabase client\n        const { createClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\"));\n        const supabase = await createClient();\n        await supabase.from('track_services').insert(trackService);\n    }\n    // Helper methods for SupabaseService (these would be added to the service)\n    async createTrack(trackData) {\n        const { createClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\"));\n        const supabase = await createClient();\n        const { data, error } = await supabase.from('tracks').insert(trackData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async createArtist(artistData) {\n        const { createClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\"));\n        const supabase = await createClient();\n        const { data, error } = await supabase.from('artists').insert(artistData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async createAlbum(albumData) {\n        const { createClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\"));\n        const supabase = await createClient();\n        const { data, error } = await supabase.from('albums').insert(albumData).select().single();\n        if (error) throw error;\n        return data;\n    }\n}\n// Export singleton instance\nconst spotifyService = new SpotifyService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/spotify-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase/client.ts":
/*!********************************!*\
  !*** ./lib/supabase/client.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ createClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\nfunction createClient() {\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createBrowserClient)(\"https://nvwrmmuyzxanjvsadtfh.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52d3JtbXV5enhhbmp2c2FkdGZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3MjgzNjQsImV4cCI6MjA3MTMwNDM2NH0.8k1x6zfO0KO9ExeDKcPP4FbaCA-BezxJWGHnNJ0VhQU\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UvY2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1EO0FBRTVDLFNBQVNDO0lBQ2QsT0FBT0Qsa0VBQW1CQSxDQUN4QkUsMENBQW9DLEVBQ3BDQSxrTkFBeUM7QUFFN0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jYXJyaWV5dS9EZXNrdG9wL3Nwb3RpZnkvbGliL3N1cGFiYXNlL2NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVCcm93c2VyQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3NzcidcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudCgpIHtcbiAgcmV0dXJuIGNyZWF0ZUJyb3dzZXJDbGllbnQoXG4gICAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMISxcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSFcbiAgKVxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZUJyb3dzZXJDbGllbnQiLCJjcmVhdGVDbGllbnQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase/client.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase/server.ts":
/*!********************************!*\
  !*** ./lib/supabase/server.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseServerService: () => (/* binding */ SupabaseServerService),\n/* harmony export */   supabaseServerService: () => (/* binding */ supabaseServerService)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nclass SupabaseServerService {\n    // =====================================================\n    // USER OPERATIONS\n    // =====================================================\n    async getCurrentUser() {\n        try {\n            const { data: { user } } = await this.supabase.auth.getUser();\n            if (!user) return null;\n            const { data, error } = await this.supabase.from('users').select('*').eq('id', user.id).single();\n            if (error) {\n                console.error('Error getting user from database:', error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error('Error getting current user:', error);\n            return null;\n        }\n    }\n    async createUser(userData) {\n        const { data, error } = await this.supabase.from('users').insert(userData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async updateUser(userId, updates) {\n        const { data, error } = await this.supabase.from('users').update(updates).eq('id', userId).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // SERVICE CONNECTION OPERATIONS (Server-side)\n    // =====================================================\n    async getUserServices(userId) {\n        const { data, error } = await this.supabase.from('user_services').select('*').eq('user_id', userId).eq('is_active', true);\n        if (error) throw error;\n        return data;\n    }\n    async connectService(serviceData) {\n        try {\n            const { data, error } = await this.supabase.from('user_services').upsert(serviceData, {\n                onConflict: 'user_id,service_id'\n            }).select().single();\n            if (error) {\n                console.error('Error connecting service:', error);\n                // If it's an RLS error and we're using anon key, provide helpful message\n                if (error.message?.includes('row-level security') && process.env.SUPABASE_SERVICE_ROLE_KEY?.includes('0000000000000000000000000000000000000000')) {\n                    throw new Error('Service role key not configured. Please update SUPABASE_SERVICE_ROLE_KEY in your .env file with the real key from Supabase Dashboard.');\n                }\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.error('Error in connectService:', error);\n            throw error;\n        }\n    }\n    async disconnectService(userId, serviceId) {\n        const { error } = await this.supabase.from('user_services').update({\n            is_active: false\n        }).eq('user_id', userId).eq('service_id', serviceId);\n        if (error) throw error;\n    }\n    async updateService(userId, serviceId, updates) {\n        const { data, error } = await this.supabase.from('user_services').update(updates).eq('user_id', userId).eq('service_id', serviceId).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // UTILITY OPERATIONS\n    // =====================================================\n    async ensureUserExists(userId, email, name) {\n        // Try to get existing user\n        const { data: existingUser, error: getError } = await this.supabase.from('users').select('*').eq('id', userId).single();\n        if (existingUser) {\n            return existingUser;\n        }\n        // Create user if doesn't exist\n        if (email && name) {\n            const { data: newUser, error: createError } = await this.supabase.from('users').insert({\n                id: userId,\n                email,\n                name,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }).select().single();\n            if (createError) {\n                console.error('Error creating user:', createError);\n                throw createError;\n            }\n            return newUser;\n        }\n        throw new Error('User not found and insufficient data to create user');\n    }\n    constructor(){\n        this.supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://nvwrmmuyzxanjvsadtfh.supabase.co\", // Use anon key as fallback if service role key is invalid\n        process.env.SUPABASE_SERVICE_ROLE_KEY?.includes('0000000000000000000000000000000000000000') ? \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52d3JtbXV5enhhbmp2c2FkdGZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3MjgzNjQsImV4cCI6MjA3MTMwNDM2NH0.8k1x6zfO0KO9ExeDKcPP4FbaCA-BezxJWGHnNJ0VhQU\" : process.env.SUPABASE_SERVICE_ROLE_KEY);\n    }\n}\n// Export a singleton instance\nconst supabaseServerService = new SupabaseServerService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase/server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase/service.ts":
/*!*********************************!*\
  !*** ./lib/supabase/service.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseService: () => (/* binding */ SupabaseService),\n/* harmony export */   supabaseService: () => (/* binding */ supabaseService)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/./lib/supabase/client.ts\");\n\nclass SupabaseService {\n    // =====================================================\n    // USER OPERATIONS\n    // =====================================================\n    async getCurrentUser() {\n        const { data: { user } } = await this.supabase.auth.getUser();\n        if (!user) return null;\n        const { data, error } = await this.supabase.from('users').select('*').eq('id', user.id).single();\n        if (error) throw error;\n        return data;\n    }\n    async createUser(userData) {\n        const { data, error } = await this.supabase.from('users').insert(userData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async updateUser(userId, updates) {\n        const { data, error } = await this.supabase.from('users').update(updates).eq('id', userId).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // ARTIST OPERATIONS\n    // =====================================================\n    async getArtists(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('artists').select('*').order('name').range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getArtist(id) {\n        const { data, error } = await this.supabase.from('artists').select('*').eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async searchArtists(query, limit = 20) {\n        const { data, error } = await this.supabase.from('artists').select('*').ilike('name', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    async createArtist(artistData) {\n        const { data, error } = await this.supabase.from('artists').insert(artistData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // ALBUM OPERATIONS\n    // =====================================================\n    async getAlbums(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*)\n      `).order('release_date', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getAlbum(id) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*),\n        tracks:tracks(*)\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async getAlbumsByArtist(artistId) {\n        const { data, error } = await this.supabase.from('albums').select('*').eq('artist_id', artistId).order('release_date', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async searchAlbums(query, limit = 20) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*)\n      `).ilike('title', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // TRACK OPERATIONS\n    // =====================================================\n    async getTracks(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*)\n      `).order('title').range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getTrack(id) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*),\n        track_services(*)\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async getTracksByAlbum(albumId) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*)\n      `).eq('album_id', albumId).order('track_number');\n        if (error) throw error;\n        return data;\n    }\n    async searchTracks(query, limit = 20) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*)\n      `).ilike('title', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    async createTrack(trackData) {\n        const { data, error } = await this.supabase.from('tracks').insert(trackData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getTrackServices(trackId) {\n        const { data, error } = await this.supabase.from('track_services').select('*').eq('track_id', trackId).eq('is_available', true);\n        if (error) throw error;\n        return data;\n    }\n    async addTrackService(trackServiceData) {\n        const { data, error } = await this.supabase.from('track_services').insert(trackServiceData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getBestStreamUrl(trackId, preferredQuality = 'high') {\n        const { data, error } = await this.supabase.from('track_services').select('stream_url, quality').eq('track_id', trackId).eq('is_available', true).order('quality', {\n            ascending: false\n        }).limit(1).single();\n        if (error) throw error;\n        return data?.stream_url || null;\n    }\n    // =====================================================\n    // PLAYLIST OPERATIONS\n    // =====================================================\n    async getPlaylists(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).eq('visibility', 'public').order('created_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getUserPlaylists(userId) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).eq('creator_id', userId).order('updated_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async getPlaylist(id) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*),\n        playlist_tracks(\n          position,\n          track:tracks(\n            *,\n            artist:artists(*),\n            album:albums(*)\n          )\n        )\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async createPlaylist(playlistData) {\n        const { data, error } = await this.supabase.from('playlists').insert(playlistData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async addTrackToPlaylist(playlistId, trackId, position) {\n        // Get the next position if not provided\n        if (!position) {\n            const { data: maxPosition } = await this.supabase.from('playlist_tracks').select('position').eq('playlist_id', playlistId).order('position', {\n                ascending: false\n            }).limit(1).single();\n            position = (maxPosition?.position || 0) + 1;\n        }\n        const { error } = await this.supabase.from('playlist_tracks').insert({\n            playlist_id: playlistId,\n            track_id: trackId,\n            position,\n            added_by: (await this.getCurrentUser())?.id || null\n        });\n        if (error) throw error;\n    }\n    // =====================================================\n    // USER LIBRARY OPERATIONS\n    // =====================================================\n    async getUserLibrary(userId) {\n        const { data, error } = await this.supabase.from('user_library').select(`\n        *,\n        track:tracks(\n          *,\n          artist:artists(*),\n          album:albums(*)\n        ),\n        album:albums(\n          *,\n          artist:artists(*)\n        ),\n        artist:artists(*),\n        playlist:playlists(\n          *,\n          creator:users!creator_id(*)\n        )\n      `).eq('user_id', userId).order('added_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async addToLibrary(libraryItem) {\n        const { data, error } = await this.supabase.from('user_library').insert(libraryItem).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async removeFromLibrary(userId, itemId, itemType) {\n        const { error } = await this.supabase.from('user_library').delete().eq('user_id', userId).eq(`${itemType}_id`, itemId);\n        if (error) throw error;\n    }\n    // =====================================================\n    // PLAY HISTORY OPERATIONS\n    // =====================================================\n    async addPlayHistory(historyItem) {\n        const { data, error } = await this.supabase.from('user_play_history').insert(historyItem).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getUserPlayHistory(userId, limit = 50) {\n        const { data, error } = await this.supabase.from('user_play_history').select(`\n        *,\n        track:tracks(\n          *,\n          artist:artists(*),\n          album:albums(*)\n        )\n      `).eq('user_id', userId).order('played_at', {\n            ascending: false\n        }).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // SERVICE CONNECTION OPERATIONS\n    // =====================================================\n    async getUserServices(userId) {\n        const { data, error } = await this.supabase.from('user_services').select('*').eq('user_id', userId).eq('is_active', true);\n        if (error) throw error;\n        return data;\n    }\n    async connectService(serviceData) {\n        const { data, error } = await this.supabase.from('user_services').upsert(serviceData, {\n            onConflict: 'user_id,service_id'\n        }).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async disconnectService(userId, serviceId) {\n        const { error } = await this.supabase.from('user_services').update({\n            is_active: false\n        }).eq('user_id', userId).eq('service_id', serviceId);\n        if (error) throw error;\n    }\n    // =====================================================\n    // SEARCH OPERATIONS\n    // =====================================================\n    async searchAll(query, limit = 20) {\n        const [tracks, albums, artists, playlists] = await Promise.all([\n            this.searchTracks(query, limit),\n            this.searchAlbums(query, limit),\n            this.searchArtists(query, limit),\n            this.searchPlaylists(query, limit)\n        ]);\n        return {\n            tracks,\n            albums,\n            artists,\n            playlists,\n            query,\n            total: tracks.length + albums.length + artists.length + playlists.length\n        };\n    }\n    async searchPlaylists(query, limit = 20) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).ilike('title', `%${query}%`).eq('visibility', 'public').limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    constructor(){\n        this.supabase = (0,_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    }\n}\n// Export a singleton instance\nconst supabaseService = new SupabaseService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase/service.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute&page=%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute.ts&appDir=%2FUsers%2Fcarrieyu%2FDesktop%2Fspotify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fcarrieyu%2FDesktop%2Fspotify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute&page=%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute.ts&appDir=%2FUsers%2Fcarrieyu%2FDesktop%2Fspotify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fcarrieyu%2FDesktop%2Fspotify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_carrieyu_Desktop_spotify_app_api_auth_spotify_callback_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/auth/spotify/callback/route.ts */ \"(rsc)/./app/api/auth/spotify/callback/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/spotify/callback/route\",\n        pathname: \"/api/auth/spotify/callback\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/spotify/callback/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/carrieyu/Desktop/spotify/app/api/auth/spotify/callback/route.ts\",\n    nextConfigOutput,\n    userland: _Users_carrieyu_Desktop_spotify_app_api_auth_spotify_callback_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/auth/spotify/callback/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute&page=%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute.ts&appDir=%2FUsers%2Fcarrieyu%2FDesktop%2Fspotify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fcarrieyu%2FDesktop%2Fspotify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?d272":
/*!********************************!*\
  !*** supports-color (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("http2");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/superagent","vendor-chunks/mime-db","vendor-chunks/spotify-web-api-node","vendor-chunks/mime","vendor-chunks/qs","vendor-chunks/formidable","vendor-chunks/object-inspect","vendor-chunks/debug","vendor-chunks/get-intrinsic","vendor-chunks/form-data","vendor-chunks/cookiejar","vendor-chunks/asynckit","vendor-chunks/fast-safe-stringify","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/side-channel-list","vendor-chunks/ms","vendor-chunks/side-channel-weakmap","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/side-channel-map","vendor-chunks/es-set-tostringtag","vendor-chunks/side-channel","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/methods","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/call-bound","vendor-chunks/es-errors","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute&page=%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fspotify%2Fcallback%2Froute.ts&appDir=%2FUsers%2Fcarrieyu%2FDesktop%2Fspotify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fcarrieyu%2FDesktop%2Fspotify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();