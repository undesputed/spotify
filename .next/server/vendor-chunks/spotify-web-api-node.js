/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/spotify-web-api-node";
exports.ids = ["vendor-chunks/spotify-web-api-node"];
exports.modules = {

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/authentication-request.js":
/*!*************************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/authentication-request.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Request = __webpack_require__(/*! ./base-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/base-request.js\");\n\nvar DEFAULT_HOST = 'accounts.spotify.com',\n  DEFAULT_PORT = 443,\n  DEFAULT_SCHEME = 'https';\n\nmodule.exports.builder = function() {\n  return Request.builder()\n    .withHost(DEFAULT_HOST)\n    .withPort(DEFAULT_PORT)\n    .withScheme(DEFAULT_SCHEME);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL2F1dGhlbnRpY2F0aW9uLXJlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLHFGQUFnQjs7QUFFdEM7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvY2FycmlleXUvRGVza3RvcC9zcG90aWZ5L25vZGVfbW9kdWxlcy9zcG90aWZ5LXdlYi1hcGktbm9kZS9zcmMvYXV0aGVudGljYXRpb24tcmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBSZXF1ZXN0ID0gcmVxdWlyZSgnLi9iYXNlLXJlcXVlc3QnKTtcblxudmFyIERFRkFVTFRfSE9TVCA9ICdhY2NvdW50cy5zcG90aWZ5LmNvbScsXG4gIERFRkFVTFRfUE9SVCA9IDQ0MyxcbiAgREVGQVVMVF9TQ0hFTUUgPSAnaHR0cHMnO1xuXG5tb2R1bGUuZXhwb3J0cy5idWlsZGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBSZXF1ZXN0LmJ1aWxkZXIoKVxuICAgIC53aXRoSG9zdChERUZBVUxUX0hPU1QpXG4gICAgLndpdGhQb3J0KERFRkFVTFRfUE9SVClcbiAgICAud2l0aFNjaGVtZShERUZBVUxUX1NDSEVNRSk7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/authentication-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/base-request.js":
/*!***************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/base-request.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar Request = function(builder) {\n  if (!builder) {\n    throw new Error('No builder supplied to constructor');\n  }\n\n  this.host = builder.host;\n  this.port = builder.port;\n  this.scheme = builder.scheme;\n  this.queryParameters = builder.queryParameters;\n  this.bodyParameters = builder.bodyParameters;\n  this.headers = builder.headers;\n  this.path = builder.path;\n};\n\nRequest.prototype._getter = function(key) {\n  return function() {\n    return this[key];\n  };\n};\n\nRequest.prototype.getHost = Request.prototype._getter('host');\n\nRequest.prototype.getPort = Request.prototype._getter('port');\n\nRequest.prototype.getScheme = Request.prototype._getter('scheme');\n\nRequest.prototype.getPath = Request.prototype._getter('path');\n\nRequest.prototype.getQueryParameters = Request.prototype._getter(\n  'queryParameters'\n);\n\nRequest.prototype.getBodyParameters = Request.prototype._getter(\n  'bodyParameters'\n);\n\nRequest.prototype.getHeaders = Request.prototype._getter('headers');\n\nRequest.prototype.getURI = function() {\n  if (!this.scheme || !this.host || !this.port) {\n    throw new Error('Missing components necessary to construct URI');\n  }\n  var uri = this.scheme + '://' + this.host;\n  if (\n    (this.scheme === 'http' && this.port !== 80) ||\n    (this.scheme === 'https' && this.port !== 443)\n  ) {\n    uri += ':' + this.port;\n  }\n  if (this.path) {\n    uri += this.path;\n  }\n  return uri;\n};\n\nRequest.prototype.getURL = function() {\n  var uri = this.getURI();\n  if (this.getQueryParameters()) {\n    return uri + this.getQueryParameterString(this.getQueryParameters());\n  } else {\n    return uri;\n  }\n};\n\nRequest.prototype.getQueryParameterString = function() {\n  var queryParameters = this.getQueryParameters();\n  if (queryParameters) {\n    return (\n      '?' +\n      Object.keys(queryParameters)\n        .filter(function(key) {\n          return queryParameters[key] !== undefined;\n        })\n        .map(function(key) {\n          return key + '=' + queryParameters[key];\n        })\n        .join('&')\n    );\n  }\n};\n\nRequest.prototype.execute = function(method, callback) {\n  if (callback) {\n    method(this, callback);\n    return;\n  }\n  var _self = this;\n\n  return new Promise(function(resolve, reject) {\n    method(_self, function(error, result) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\nvar Builder = function() {};\n\nBuilder.prototype._setter = function(key) {\n  return function(value) {\n    this[key] = value;\n    return this;\n  };\n};\n\nBuilder.prototype.withHost = Builder.prototype._setter('host');\n\nBuilder.prototype.withPort = Builder.prototype._setter('port');\n\nBuilder.prototype.withScheme = Builder.prototype._setter('scheme');\n\nBuilder.prototype.withPath = Builder.prototype._setter('path');\n\nBuilder.prototype._assigner = function(key) {\n  return function() {\n    for (var i = 0; i < arguments.length; i++) {\n      this[key] = this._assign(this[key], arguments[i]);\n    }\n    \n    return this;\n  };\n};\n\nBuilder.prototype.withQueryParameters = Builder.prototype._assigner(\n  'queryParameters'\n);\n\nBuilder.prototype.withBodyParameters = Builder.prototype._assigner(\n  'bodyParameters'\n);\n\nBuilder.prototype.withHeaders = Builder.prototype._assigner('headers');\n\nBuilder.prototype.withAuth = function(accessToken) {\n  if (accessToken) {\n    this.withHeaders({ Authorization: 'Bearer ' + accessToken });\n  }\n  return this;\n};\n\nBuilder.prototype._assign = function(src, obj) {\n  if (obj && Array.isArray(obj)) {\n    return obj;\n  }\n  if (obj && typeof obj === 'string') {\n    return obj;\n  }\n  if (obj && Object.keys(obj).length > 0) {\n    return Object.assign(src || {}, obj);\n  }\n  return src;\n};\n\nBuilder.prototype.build = function() {\n  return new Request(this);\n};\n\nmodule.exports.builder = function() {\n  return new Builder();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL2Jhc2UtcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLHVCQUF1Qix3Q0FBd0M7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0I7QUFDdEI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2NhcnJpZXl1L0Rlc2t0b3Avc3BvdGlmeS9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL2Jhc2UtcmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBSZXF1ZXN0ID0gZnVuY3Rpb24oYnVpbGRlcikge1xuICBpZiAoIWJ1aWxkZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGJ1aWxkZXIgc3VwcGxpZWQgdG8gY29uc3RydWN0b3InKTtcbiAgfVxuXG4gIHRoaXMuaG9zdCA9IGJ1aWxkZXIuaG9zdDtcbiAgdGhpcy5wb3J0ID0gYnVpbGRlci5wb3J0O1xuICB0aGlzLnNjaGVtZSA9IGJ1aWxkZXIuc2NoZW1lO1xuICB0aGlzLnF1ZXJ5UGFyYW1ldGVycyA9IGJ1aWxkZXIucXVlcnlQYXJhbWV0ZXJzO1xuICB0aGlzLmJvZHlQYXJhbWV0ZXJzID0gYnVpbGRlci5ib2R5UGFyYW1ldGVycztcbiAgdGhpcy5oZWFkZXJzID0gYnVpbGRlci5oZWFkZXJzO1xuICB0aGlzLnBhdGggPSBidWlsZGVyLnBhdGg7XG59O1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5fZ2V0dGVyID0gZnVuY3Rpb24oa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpc1trZXldO1xuICB9O1xufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuZ2V0SG9zdCA9IFJlcXVlc3QucHJvdG90eXBlLl9nZXR0ZXIoJ2hvc3QnKTtcblxuUmVxdWVzdC5wcm90b3R5cGUuZ2V0UG9ydCA9IFJlcXVlc3QucHJvdG90eXBlLl9nZXR0ZXIoJ3BvcnQnKTtcblxuUmVxdWVzdC5wcm90b3R5cGUuZ2V0U2NoZW1lID0gUmVxdWVzdC5wcm90b3R5cGUuX2dldHRlcignc2NoZW1lJyk7XG5cblJlcXVlc3QucHJvdG90eXBlLmdldFBhdGggPSBSZXF1ZXN0LnByb3RvdHlwZS5fZ2V0dGVyKCdwYXRoJyk7XG5cblJlcXVlc3QucHJvdG90eXBlLmdldFF1ZXJ5UGFyYW1ldGVycyA9IFJlcXVlc3QucHJvdG90eXBlLl9nZXR0ZXIoXG4gICdxdWVyeVBhcmFtZXRlcnMnXG4pO1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5nZXRCb2R5UGFyYW1ldGVycyA9IFJlcXVlc3QucHJvdG90eXBlLl9nZXR0ZXIoXG4gICdib2R5UGFyYW1ldGVycydcbik7XG5cblJlcXVlc3QucHJvdG90eXBlLmdldEhlYWRlcnMgPSBSZXF1ZXN0LnByb3RvdHlwZS5fZ2V0dGVyKCdoZWFkZXJzJyk7XG5cblJlcXVlc3QucHJvdG90eXBlLmdldFVSSSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuc2NoZW1lIHx8ICF0aGlzLmhvc3QgfHwgIXRoaXMucG9ydCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBjb21wb25lbnRzIG5lY2Vzc2FyeSB0byBjb25zdHJ1Y3QgVVJJJyk7XG4gIH1cbiAgdmFyIHVyaSA9IHRoaXMuc2NoZW1lICsgJzovLycgKyB0aGlzLmhvc3Q7XG4gIGlmIChcbiAgICAodGhpcy5zY2hlbWUgPT09ICdodHRwJyAmJiB0aGlzLnBvcnQgIT09IDgwKSB8fFxuICAgICh0aGlzLnNjaGVtZSA9PT0gJ2h0dHBzJyAmJiB0aGlzLnBvcnQgIT09IDQ0MylcbiAgKSB7XG4gICAgdXJpICs9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuICBpZiAodGhpcy5wYXRoKSB7XG4gICAgdXJpICs9IHRoaXMucGF0aDtcbiAgfVxuICByZXR1cm4gdXJpO1xufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuZ2V0VVJMID0gZnVuY3Rpb24oKSB7XG4gIHZhciB1cmkgPSB0aGlzLmdldFVSSSgpO1xuICBpZiAodGhpcy5nZXRRdWVyeVBhcmFtZXRlcnMoKSkge1xuICAgIHJldHVybiB1cmkgKyB0aGlzLmdldFF1ZXJ5UGFyYW1ldGVyU3RyaW5nKHRoaXMuZ2V0UXVlcnlQYXJhbWV0ZXJzKCkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1cmk7XG4gIH1cbn07XG5cblJlcXVlc3QucHJvdG90eXBlLmdldFF1ZXJ5UGFyYW1ldGVyU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHZhciBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmdldFF1ZXJ5UGFyYW1ldGVycygpO1xuICBpZiAocXVlcnlQYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICc/JyArXG4gICAgICBPYmplY3Qua2V5cyhxdWVyeVBhcmFtZXRlcnMpXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIHF1ZXJ5UGFyYW1ldGVyc1trZXldICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGtleSArICc9JyArIHF1ZXJ5UGFyYW1ldGVyc1trZXldO1xuICAgICAgICB9KVxuICAgICAgICAuam9pbignJicpXG4gICAgKTtcbiAgfVxufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uKG1ldGhvZCwgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgbWV0aG9kKHRoaXMsIGNhbGxiYWNrKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIF9zZWxmID0gdGhpcztcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbWV0aG9kKF9zZWxmLCBmdW5jdGlvbihlcnJvciwgcmVzdWx0KSB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgQnVpbGRlciA9IGZ1bmN0aW9uKCkge307XG5cbkJ1aWxkZXIucHJvdG90eXBlLl9zZXR0ZXIgPSBmdW5jdGlvbihrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59O1xuXG5CdWlsZGVyLnByb3RvdHlwZS53aXRoSG9zdCA9IEJ1aWxkZXIucHJvdG90eXBlLl9zZXR0ZXIoJ2hvc3QnKTtcblxuQnVpbGRlci5wcm90b3R5cGUud2l0aFBvcnQgPSBCdWlsZGVyLnByb3RvdHlwZS5fc2V0dGVyKCdwb3J0Jyk7XG5cbkJ1aWxkZXIucHJvdG90eXBlLndpdGhTY2hlbWUgPSBCdWlsZGVyLnByb3RvdHlwZS5fc2V0dGVyKCdzY2hlbWUnKTtcblxuQnVpbGRlci5wcm90b3R5cGUud2l0aFBhdGggPSBCdWlsZGVyLnByb3RvdHlwZS5fc2V0dGVyKCdwYXRoJyk7XG5cbkJ1aWxkZXIucHJvdG90eXBlLl9hc3NpZ25lciA9IGZ1bmN0aW9uKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXNba2V5XSA9IHRoaXMuX2Fzc2lnbih0aGlzW2tleV0sIGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufTtcblxuQnVpbGRlci5wcm90b3R5cGUud2l0aFF1ZXJ5UGFyYW1ldGVycyA9IEJ1aWxkZXIucHJvdG90eXBlLl9hc3NpZ25lcihcbiAgJ3F1ZXJ5UGFyYW1ldGVycydcbik7XG5cbkJ1aWxkZXIucHJvdG90eXBlLndpdGhCb2R5UGFyYW1ldGVycyA9IEJ1aWxkZXIucHJvdG90eXBlLl9hc3NpZ25lcihcbiAgJ2JvZHlQYXJhbWV0ZXJzJ1xuKTtcblxuQnVpbGRlci5wcm90b3R5cGUud2l0aEhlYWRlcnMgPSBCdWlsZGVyLnByb3RvdHlwZS5fYXNzaWduZXIoJ2hlYWRlcnMnKTtcblxuQnVpbGRlci5wcm90b3R5cGUud2l0aEF1dGggPSBmdW5jdGlvbihhY2Nlc3NUb2tlbikge1xuICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICB0aGlzLndpdGhIZWFkZXJzKHsgQXV0aG9yaXphdGlvbjogJ0JlYXJlciAnICsgYWNjZXNzVG9rZW4gfSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWlsZGVyLnByb3RvdHlwZS5fYXNzaWduID0gZnVuY3Rpb24oc3JjLCBvYmopIHtcbiAgaWYgKG9iaiAmJiBBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGlmIChvYmogJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3JjIHx8IHt9LCBvYmopO1xuICB9XG4gIHJldHVybiBzcmM7XG59O1xuXG5CdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5idWlsZGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgQnVpbGRlcigpO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/base-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/http-manager.js":
/*!***************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/http-manager.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar superagent = __webpack_require__(/*! superagent */ \"(rsc)/./node_modules/superagent/lib/node/index.js\"),\n  { TimeoutError, \n    WebapiError, \n    WebapiRegularError, \n    WebapiAuthenticationError,\n    WebapiPlayerError \n  } =  __webpack_require__(/*! ./response-error */ \"(rsc)/./node_modules/spotify-web-api-node/src/response-error.js\");\n\nvar HttpManager = {};\n\n/* Create superagent options from the base request */\nvar _getParametersFromRequest = function(request) {\n  var options = {};\n\n  if (request.getQueryParameters()) {\n    options.query = request.getQueryParameters();\n  }\n\n  if (request.getHeaders() && request.getHeaders()['Content-Type'] === 'application/json') {\n    options.data = JSON.stringify(request.getBodyParameters());\n  } else if (request.getBodyParameters()) {\n    options.data = request.getBodyParameters();\n  }\n\n  if (request.getHeaders()) {\n    options.headers = request.getHeaders();\n  }\n  return options;\n};\n\nvar _toError = function(response) {\n  if (typeof response.body === 'object' && response.body.error && typeof response.body.error === 'object' && response.body.error.reason) {\n    return new WebapiPlayerError(response.body, response.headers, response.statusCode);\n  }\n\n  if (typeof response.body === 'object' && response.body.error && typeof response.body.error === 'object') {\n    return new WebapiRegularError(response.body, response.headers, response.statusCode);\n  }\n\n  if (typeof response.body === 'object' && response.body.error && typeof response.body.error === 'string') {\n    return new WebapiAuthenticationError(response.body, response.headers, response.statusCode);\n  }\n  \n  /* Other type of error, or unhandled Web API error format */\n  return new WebapiError(response.body, response.headers, response.statusCode, response.body);\n};\n\n/* Make the request to the Web API */\nHttpManager._makeRequest = function(method, options, uri, callback) {\n  var req = method.bind(superagent)(uri);\n\n  if (options.query) {\n    req.query(options.query);\n  }\n\n  if (options.headers) {\n    req.set(options.headers);\n  }\n\n  if (options.data) {\n    req.send(options.data);\n  }\n\n  req.end(function(err, response) {\n    if (err) {\n      if (err.timeout) {\n        return callback(new TimeoutError());\n      } else if (err.response) {\n        return callback(_toError(err.response));\n      } else {\n        return callback(err);\n      }\n    }\n\n    return callback(null, {\n      body: response.body,\n      headers: response.headers,\n      statusCode: response.statusCode\n    });\n  });\n};\n\n/**\n * Make a HTTP GET request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.get = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.get;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP POST request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.post = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.post;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP DELETE request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.del = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.del;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP PUT request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.put = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.put;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\nmodule.exports = HttpManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL2h0dHAtbWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpQkFBaUIsbUJBQU8sQ0FBQyxxRUFBWTtBQUNyQyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLEdBQUcsbUJBQU8sQ0FBQyx5RkFBa0I7O0FBRWpDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jYXJyaWV5dS9EZXNrdG9wL3Nwb3RpZnkvbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy9odHRwLW1hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3VwZXJhZ2VudCA9IHJlcXVpcmUoJ3N1cGVyYWdlbnQnKSxcbiAgeyBUaW1lb3V0RXJyb3IsIFxuICAgIFdlYmFwaUVycm9yLCBcbiAgICBXZWJhcGlSZWd1bGFyRXJyb3IsIFxuICAgIFdlYmFwaUF1dGhlbnRpY2F0aW9uRXJyb3IsXG4gICAgV2ViYXBpUGxheWVyRXJyb3IgXG4gIH0gPSAgcmVxdWlyZSgnLi9yZXNwb25zZS1lcnJvcicpO1xuXG52YXIgSHR0cE1hbmFnZXIgPSB7fTtcblxuLyogQ3JlYXRlIHN1cGVyYWdlbnQgb3B0aW9ucyBmcm9tIHRoZSBiYXNlIHJlcXVlc3QgKi9cbnZhciBfZ2V0UGFyYW1ldGVyc0Zyb21SZXF1ZXN0ID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuICB2YXIgb3B0aW9ucyA9IHt9O1xuXG4gIGlmIChyZXF1ZXN0LmdldFF1ZXJ5UGFyYW1ldGVycygpKSB7XG4gICAgb3B0aW9ucy5xdWVyeSA9IHJlcXVlc3QuZ2V0UXVlcnlQYXJhbWV0ZXJzKCk7XG4gIH1cblxuICBpZiAocmVxdWVzdC5nZXRIZWFkZXJzKCkgJiYgcmVxdWVzdC5nZXRIZWFkZXJzKClbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpIHtcbiAgICBvcHRpb25zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShyZXF1ZXN0LmdldEJvZHlQYXJhbWV0ZXJzKCkpO1xuICB9IGVsc2UgaWYgKHJlcXVlc3QuZ2V0Qm9keVBhcmFtZXRlcnMoKSkge1xuICAgIG9wdGlvbnMuZGF0YSA9IHJlcXVlc3QuZ2V0Qm9keVBhcmFtZXRlcnMoKTtcbiAgfVxuXG4gIGlmIChyZXF1ZXN0LmdldEhlYWRlcnMoKSkge1xuICAgIG9wdGlvbnMuaGVhZGVycyA9IHJlcXVlc3QuZ2V0SGVhZGVycygpO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxudmFyIF90b0Vycm9yID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgaWYgKHR5cGVvZiByZXNwb25zZS5ib2R5ID09PSAnb2JqZWN0JyAmJiByZXNwb25zZS5ib2R5LmVycm9yICYmIHR5cGVvZiByZXNwb25zZS5ib2R5LmVycm9yID09PSAnb2JqZWN0JyAmJiByZXNwb25zZS5ib2R5LmVycm9yLnJlYXNvbikge1xuICAgIHJldHVybiBuZXcgV2ViYXBpUGxheWVyRXJyb3IocmVzcG9uc2UuYm9keSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlc3BvbnNlLmJvZHkgPT09ICdvYmplY3QnICYmIHJlc3BvbnNlLmJvZHkuZXJyb3IgJiYgdHlwZW9mIHJlc3BvbnNlLmJvZHkuZXJyb3IgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG5ldyBXZWJhcGlSZWd1bGFyRXJyb3IocmVzcG9uc2UuYm9keSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlc3BvbnNlLmJvZHkgPT09ICdvYmplY3QnICYmIHJlc3BvbnNlLmJvZHkuZXJyb3IgJiYgdHlwZW9mIHJlc3BvbnNlLmJvZHkuZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG5ldyBXZWJhcGlBdXRoZW50aWNhdGlvbkVycm9yKHJlc3BvbnNlLmJvZHksIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLnN0YXR1c0NvZGUpO1xuICB9XG4gIFxuICAvKiBPdGhlciB0eXBlIG9mIGVycm9yLCBvciB1bmhhbmRsZWQgV2ViIEFQSSBlcnJvciBmb3JtYXQgKi9cbiAgcmV0dXJuIG5ldyBXZWJhcGlFcnJvcihyZXNwb25zZS5ib2R5LCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5zdGF0dXNDb2RlLCByZXNwb25zZS5ib2R5KTtcbn07XG5cbi8qIE1ha2UgdGhlIHJlcXVlc3QgdG8gdGhlIFdlYiBBUEkgKi9cbkh0dHBNYW5hZ2VyLl9tYWtlUmVxdWVzdCA9IGZ1bmN0aW9uKG1ldGhvZCwgb3B0aW9ucywgdXJpLCBjYWxsYmFjaykge1xuICB2YXIgcmVxID0gbWV0aG9kLmJpbmQoc3VwZXJhZ2VudCkodXJpKTtcblxuICBpZiAob3B0aW9ucy5xdWVyeSkge1xuICAgIHJlcS5xdWVyeShvcHRpb25zLnF1ZXJ5KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhlYWRlcnMpIHtcbiAgICByZXEuc2V0KG9wdGlvbnMuaGVhZGVycyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgcmVxLnNlbmQob3B0aW9ucy5kYXRhKTtcbiAgfVxuXG4gIHJlcS5lbmQoZnVuY3Rpb24oZXJyLCByZXNwb25zZSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGlmIChlcnIudGltZW91dCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IFRpbWVvdXRFcnJvcigpKTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyLnJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhfdG9FcnJvcihlcnIucmVzcG9uc2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB7XG4gICAgICBib2R5OiByZXNwb25zZS5ib2R5LFxuICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1c0NvZGVcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIE1ha2UgYSBIVFRQIEdFVCByZXF1ZXN0LlxuICogQHBhcmFtIHtCYXNlUmVxdWVzdH0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cbkh0dHBNYW5hZ2VyLmdldCA9IGZ1bmN0aW9uKHJlcXVlc3QsIGNhbGxiYWNrKSB7XG4gIHZhciBvcHRpb25zID0gX2dldFBhcmFtZXRlcnNGcm9tUmVxdWVzdChyZXF1ZXN0KTtcbiAgdmFyIG1ldGhvZCA9IHN1cGVyYWdlbnQuZ2V0O1xuXG4gIEh0dHBNYW5hZ2VyLl9tYWtlUmVxdWVzdChtZXRob2QsIG9wdGlvbnMsIHJlcXVlc3QuZ2V0VVJJKCksIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIEhUVFAgUE9TVCByZXF1ZXN0LlxuICogQHBhcmFtIHtCYXNlUmVxdWVzdH0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cbkh0dHBNYW5hZ2VyLnBvc3QgPSBmdW5jdGlvbihyZXF1ZXN0LCBjYWxsYmFjaykge1xuICB2YXIgb3B0aW9ucyA9IF9nZXRQYXJhbWV0ZXJzRnJvbVJlcXVlc3QocmVxdWVzdCk7XG4gIHZhciBtZXRob2QgPSBzdXBlcmFnZW50LnBvc3Q7XG5cbiAgSHR0cE1hbmFnZXIuX21ha2VSZXF1ZXN0KG1ldGhvZCwgb3B0aW9ucywgcmVxdWVzdC5nZXRVUkkoKSwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgSFRUUCBERUxFVEUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7QmFzZVJlcXVlc3R9IFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5IdHRwTWFuYWdlci5kZWwgPSBmdW5jdGlvbihyZXF1ZXN0LCBjYWxsYmFjaykge1xuICB2YXIgb3B0aW9ucyA9IF9nZXRQYXJhbWV0ZXJzRnJvbVJlcXVlc3QocmVxdWVzdCk7XG4gIHZhciBtZXRob2QgPSBzdXBlcmFnZW50LmRlbDtcblxuICBIdHRwTWFuYWdlci5fbWFrZVJlcXVlc3QobWV0aG9kLCBvcHRpb25zLCByZXF1ZXN0LmdldFVSSSgpLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIE1ha2UgYSBIVFRQIFBVVCByZXF1ZXN0LlxuICogQHBhcmFtIHtCYXNlUmVxdWVzdH0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cbkh0dHBNYW5hZ2VyLnB1dCA9IGZ1bmN0aW9uKHJlcXVlc3QsIGNhbGxiYWNrKSB7XG4gIHZhciBvcHRpb25zID0gX2dldFBhcmFtZXRlcnNGcm9tUmVxdWVzdChyZXF1ZXN0KTtcbiAgdmFyIG1ldGhvZCA9IHN1cGVyYWdlbnQucHV0O1xuXG4gIEh0dHBNYW5hZ2VyLl9tYWtlUmVxdWVzdChtZXRob2QsIG9wdGlvbnMsIHJlcXVlc3QuZ2V0VVJJKCksIGNhbGxiYWNrKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSHR0cE1hbmFnZXI7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/http-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/response-error.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/response-error.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("/* Timeout */\nclass NamedError extends Error {\n  get name() {\n    return this.constructor.name;\n  }  \n}\n\nclass TimeoutError extends NamedError {\n  constructor() {\n    const message = 'A timeout occurred while communicating with Spotify\\'s Web API.';\n    super(message);\n  }\n\n}\n\n/* Web API Parent and fallback error */\nclass WebapiError extends NamedError {\n  constructor(body, headers, statusCode, message) {\n    super(message);\n    this.body = body;\n    this.headers = headers;\n    this.statusCode = statusCode;\n  }\n\n}\n\n/** \n * Regular Error\n * { status : <integer>, message : <string> }\n */\nclass WebapiRegularError extends WebapiError {\n  constructor(body, headers, statusCode) {\n    const message = 'An error occurred while communicating with Spotify\\'s Web API.\\n' +\n    'Details: ' + body.error.message + '.';\n\n    super(body, headers, statusCode, message);\n  }\n}\n\n/**\n * Authentication Error \n * { error : <string>, error_description : <string> }\n */\nclass WebapiAuthenticationError extends WebapiError {\n  constructor(body, headers, statusCode) {\n    const message = 'An authentication error occurred while communicating with Spotify\\'s Web API.\\n' +\n    'Details: ' + body.error + (body.error_description ? ' ' + body.error_description + '.' : '.');\n\n    super(body, headers, statusCode, message);\n  }\n}\n\n/**\n * Player Error \n * { status : <integer>, message : <string>, reason : <string> }\n */\nclass WebapiPlayerError extends WebapiError {\n  constructor(body, headers, statusCode) {\n    const message = 'An error occurred while communicating with Spotify\\'s Web API.\\n' +\n    'Details: ' + body.error.message + (body.error.reason ? ' ' + body.error.reason + '.' : '.');\n\n    super(body, headers, statusCode, message);\n  }\n}\n\nmodule.exports = { WebapiError, TimeoutError, WebapiRegularError, WebapiAuthenticationError, WebapiPlayerError };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3Jlc3BvbnNlLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyIvVXNlcnMvY2FycmlleXUvRGVza3RvcC9zcG90aWZ5L25vZGVfbW9kdWxlcy9zcG90aWZ5LXdlYi1hcGktbm9kZS9zcmMvcmVzcG9uc2UtZXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogVGltZW91dCAqL1xuY2xhc3MgTmFtZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgfSAgXG59XG5cbmNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIE5hbWVkRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gJ0EgdGltZW91dCBvY2N1cnJlZCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggU3BvdGlmeVxcJ3MgV2ViIEFQSS4nO1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG5cbn1cblxuLyogV2ViIEFQSSBQYXJlbnQgYW5kIGZhbGxiYWNrIGVycm9yICovXG5jbGFzcyBXZWJhcGlFcnJvciBleHRlbmRzIE5hbWVkRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlLCBtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gIH1cblxufVxuXG4vKiogXG4gKiBSZWd1bGFyIEVycm9yXG4gKiB7IHN0YXR1cyA6IDxpbnRlZ2VyPiwgbWVzc2FnZSA6IDxzdHJpbmc+IH1cbiAqL1xuY2xhc3MgV2ViYXBpUmVndWxhckVycm9yIGV4dGVuZHMgV2ViYXBpRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggU3BvdGlmeVxcJ3MgV2ViIEFQSS5cXG4nICtcbiAgICAnRGV0YWlsczogJyArIGJvZHkuZXJyb3IubWVzc2FnZSArICcuJztcblxuICAgIHN1cGVyKGJvZHksIGhlYWRlcnMsIHN0YXR1c0NvZGUsIG1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogQXV0aGVudGljYXRpb24gRXJyb3IgXG4gKiB7IGVycm9yIDogPHN0cmluZz4sIGVycm9yX2Rlc2NyaXB0aW9uIDogPHN0cmluZz4gfVxuICovXG5jbGFzcyBXZWJhcGlBdXRoZW50aWNhdGlvbkVycm9yIGV4dGVuZHMgV2ViYXBpRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9ICdBbiBhdXRoZW50aWNhdGlvbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggU3BvdGlmeVxcJ3MgV2ViIEFQSS5cXG4nICtcbiAgICAnRGV0YWlsczogJyArIGJvZHkuZXJyb3IgKyAoYm9keS5lcnJvcl9kZXNjcmlwdGlvbiA/ICcgJyArIGJvZHkuZXJyb3JfZGVzY3JpcHRpb24gKyAnLicgOiAnLicpO1xuXG4gICAgc3VwZXIoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSwgbWVzc2FnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBQbGF5ZXIgRXJyb3IgXG4gKiB7IHN0YXR1cyA6IDxpbnRlZ2VyPiwgbWVzc2FnZSA6IDxzdHJpbmc+LCByZWFzb24gOiA8c3RyaW5nPiB9XG4gKi9cbmNsYXNzIFdlYmFwaVBsYXllckVycm9yIGV4dGVuZHMgV2ViYXBpRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggU3BvdGlmeVxcJ3MgV2ViIEFQSS5cXG4nICtcbiAgICAnRGV0YWlsczogJyArIGJvZHkuZXJyb3IubWVzc2FnZSArIChib2R5LmVycm9yLnJlYXNvbiA/ICcgJyArIGJvZHkuZXJyb3IucmVhc29uICsgJy4nIDogJy4nKTtcblxuICAgIHN1cGVyKGJvZHksIGhlYWRlcnMsIHN0YXR1c0NvZGUsIG1lc3NhZ2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBXZWJhcGlFcnJvciwgVGltZW91dEVycm9yLCBXZWJhcGlSZWd1bGFyRXJyb3IsIFdlYmFwaUF1dGhlbnRpY2F0aW9uRXJyb3IsIFdlYmFwaVBsYXllckVycm9yIH07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/response-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/server-methods.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/server-methods.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar AuthenticationRequest = __webpack_require__(/*! ./authentication-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/authentication-request.js\");\nvar HttpManager = __webpack_require__(/*! ./http-manager */ \"(rsc)/./node_modules/spotify-web-api-node/src/http-manager.js\");\n\nmodule.exports = {\n\n  /**\n   * Retrieve a URL where the user can give the application permissions.\n   * @param {string[]} scopes The scopes corresponding to the permissions the application needs.\n   * @param {string} state A parameter that you can use to maintain a value between the request and the callback to redirect_uri.It is useful to prevent CSRF exploits.\n   * @param {boolean} showDialog A parameter that you can use to force the user to approve the app on each login rather than being automatically redirected.\n   * @param {string} responseType An optional parameter that you can use to specify the code response based on the authentication type - can be set to 'code' or 'token'. Default 'code' to ensure backwards compatability.\n   * @returns {string} The URL where the user can give application permissions.\n   */\n  createAuthorizeURL: function(scopes, state, showDialog, responseType = 'code') {\n    return AuthenticationRequest.builder()\n      .withPath('/authorize')\n      .withQueryParameters({\n        client_id: this.getClientId(),\n        response_type: responseType,\n        redirect_uri: this.getRedirectURI(),\n        scope: scopes.join('%20'),\n        state: state,\n        show_dialog: showDialog && !!showDialog\n      })\n      .build()\n      .getURL();\n  },\n\n  /**\n   * Request an access token using the Client Credentials flow.\n   * Requires that client ID and client secret has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          token type and time to expiration. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  clientCredentialsGrant: function(callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'client_credentials'\n      })\n      .withHeaders({\n        Authorization:\n          'Basic ' +\n          new Buffer(\n            this.getClientId() + ':' + this.getClientSecret()\n          ).toString('base64'),\n        'Content-Type' : 'application/x-www-form-urlencoded'        \n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Request an access token using the Authorization Code flow.\n   * Requires that client ID, client secret, and redirect URI has been set previous to the call.\n   * @param {string} code The authorization code returned in the callback in the Authorization Code flow.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          refresh token, token type and time to expiration. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */\n  authorizationCodeGrant: function(code, callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'authorization_code',\n        redirect_uri: this.getRedirectURI(),\n        code: code,\n        client_id: this.getClientId(),\n        client_secret: this.getClientSecret()\n      })\n      .withHeaders({ 'Content-Type' : 'application/x-www-form-urlencoded' })\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Refresh the access token given that it hasn't expired.\n   * Requires that client ID, client secret and refresh token has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing the\n   *          access token, time to expiration and token type. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */\n  refreshAccessToken: function(callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'refresh_token',\n        refresh_token: this.getRefreshToken()\n      })\n      .withHeaders({\n        Authorization:\n          'Basic ' +\n          new Buffer(\n            this.getClientId() + ':' + this.getClientSecret()\n          ).toString('base64'),\n          'Content-Type' : 'application/x-www-form-urlencoded'\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3NlcnZlci1tZXRob2RzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDRCQUE0QixtQkFBTyxDQUFDLHlHQUEwQjtBQUM5RCxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBZ0I7O0FBRTFDOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QixhQUFhLFFBQVE7QUFDckIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUIsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsaUJBQWlCO0FBQzlCLGVBQWUsbUJBQW1CO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxxQkFBcUIsc0RBQXNEO0FBQzNFO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCLGVBQWUsbUJBQW1CO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2NhcnJpZXl1L0Rlc2t0b3Avc3BvdGlmeS9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3NlcnZlci1tZXRob2RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEF1dGhlbnRpY2F0aW9uUmVxdWVzdCA9IHJlcXVpcmUoJy4vYXV0aGVudGljYXRpb24tcmVxdWVzdCcpO1xudmFyIEh0dHBNYW5hZ2VyID0gcmVxdWlyZSgnLi9odHRwLW1hbmFnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGEgVVJMIHdoZXJlIHRoZSB1c2VyIGNhbiBnaXZlIHRoZSBhcHBsaWNhdGlvbiBwZXJtaXNzaW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gc2NvcGVzIFRoZSBzY29wZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcGVybWlzc2lvbnMgdGhlIGFwcGxpY2F0aW9uIG5lZWRzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdGUgQSBwYXJhbWV0ZXIgdGhhdCB5b3UgY2FuIHVzZSB0byBtYWludGFpbiBhIHZhbHVlIGJldHdlZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBjYWxsYmFjayB0byByZWRpcmVjdF91cmkuSXQgaXMgdXNlZnVsIHRvIHByZXZlbnQgQ1NSRiBleHBsb2l0cy5cbiAgICogQHBhcmFtIHtib29sZWFufSBzaG93RGlhbG9nIEEgcGFyYW1ldGVyIHRoYXQgeW91IGNhbiB1c2UgdG8gZm9yY2UgdGhlIHVzZXIgdG8gYXBwcm92ZSB0aGUgYXBwIG9uIGVhY2ggbG9naW4gcmF0aGVyIHRoYW4gYmVpbmcgYXV0b21hdGljYWxseSByZWRpcmVjdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzcG9uc2VUeXBlIEFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHlvdSBjYW4gdXNlIHRvIHNwZWNpZnkgdGhlIGNvZGUgcmVzcG9uc2UgYmFzZWQgb24gdGhlIGF1dGhlbnRpY2F0aW9uIHR5cGUgLSBjYW4gYmUgc2V0IHRvICdjb2RlJyBvciAndG9rZW4nLiBEZWZhdWx0ICdjb2RlJyB0byBlbnN1cmUgYmFja3dhcmRzIGNvbXBhdGFiaWxpdHkuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBVUkwgd2hlcmUgdGhlIHVzZXIgY2FuIGdpdmUgYXBwbGljYXRpb24gcGVybWlzc2lvbnMuXG4gICAqL1xuICBjcmVhdGVBdXRob3JpemVVUkw6IGZ1bmN0aW9uKHNjb3Blcywgc3RhdGUsIHNob3dEaWFsb2csIHJlc3BvbnNlVHlwZSA9ICdjb2RlJykge1xuICAgIHJldHVybiBBdXRoZW50aWNhdGlvblJlcXVlc3QuYnVpbGRlcigpXG4gICAgICAud2l0aFBhdGgoJy9hdXRob3JpemUnKVxuICAgICAgLndpdGhRdWVyeVBhcmFtZXRlcnMoe1xuICAgICAgICBjbGllbnRfaWQ6IHRoaXMuZ2V0Q2xpZW50SWQoKSxcbiAgICAgICAgcmVzcG9uc2VfdHlwZTogcmVzcG9uc2VUeXBlLFxuICAgICAgICByZWRpcmVjdF91cmk6IHRoaXMuZ2V0UmVkaXJlY3RVUkkoKSxcbiAgICAgICAgc2NvcGU6IHNjb3Blcy5qb2luKCclMjAnKSxcbiAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICBzaG93X2RpYWxvZzogc2hvd0RpYWxvZyAmJiAhIXNob3dEaWFsb2dcbiAgICAgIH0pXG4gICAgICAuYnVpbGQoKVxuICAgICAgLmdldFVSTCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IGFuIGFjY2VzcyB0b2tlbiB1c2luZyB0aGUgQ2xpZW50IENyZWRlbnRpYWxzIGZsb3cuXG4gICAqIFJlcXVpcmVzIHRoYXQgY2xpZW50IElEIGFuZCBjbGllbnQgc2VjcmV0IGhhcyBiZWVuIHNldCBwcmV2aW91cyB0byB0aGUgY2FsbC5cbiAgICogQHBhcmFtIHtyZXF1ZXN0Q2FsbGJhY2t9IFtjYWxsYmFja10gT3B0aW9uYWwgY2FsbGJhY2sgbWV0aG9kIHRvIGJlIGNhbGxlZCBpbnN0ZWFkIG9mIHRoZSBwcm9taXNlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IEEgcHJvbWlzZSB0aGF0IGlmIHN1Y2Nlc3NmdWwsIHJlc29sdmVzIGludG8gYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGFjY2VzcyB0b2tlbixcbiAgICogICAgICAgICAgdG9rZW4gdHlwZSBhbmQgdGltZSB0byBleHBpcmF0aW9uLiBJZiByZWplY3RlZCwgaXQgY29udGFpbnMgYW4gZXJyb3Igb2JqZWN0LiBOb3QgcmV0dXJuZWQgaWYgYSBjYWxsYmFjayBpcyBnaXZlbi5cbiAgICovXG4gIGNsaWVudENyZWRlbnRpYWxzR3JhbnQ6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIEF1dGhlbnRpY2F0aW9uUmVxdWVzdC5idWlsZGVyKClcbiAgICAgIC53aXRoUGF0aCgnL2FwaS90b2tlbicpXG4gICAgICAud2l0aEJvZHlQYXJhbWV0ZXJzKHtcbiAgICAgICAgZ3JhbnRfdHlwZTogJ2NsaWVudF9jcmVkZW50aWFscydcbiAgICAgIH0pXG4gICAgICAud2l0aEhlYWRlcnMoe1xuICAgICAgICBBdXRob3JpemF0aW9uOlxuICAgICAgICAgICdCYXNpYyAnICtcbiAgICAgICAgICBuZXcgQnVmZmVyKFxuICAgICAgICAgICAgdGhpcy5nZXRDbGllbnRJZCgpICsgJzonICsgdGhpcy5nZXRDbGllbnRTZWNyZXQoKVxuICAgICAgICAgICkudG9TdHJpbmcoJ2Jhc2U2NCcpLFxuICAgICAgICAnQ29udGVudC1UeXBlJyA6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnICAgICAgICBcbiAgICAgIH0pXG4gICAgICAuYnVpbGQoKVxuICAgICAgLmV4ZWN1dGUoSHR0cE1hbmFnZXIucG9zdCwgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IGFuIGFjY2VzcyB0b2tlbiB1c2luZyB0aGUgQXV0aG9yaXphdGlvbiBDb2RlIGZsb3cuXG4gICAqIFJlcXVpcmVzIHRoYXQgY2xpZW50IElELCBjbGllbnQgc2VjcmV0LCBhbmQgcmVkaXJlY3QgVVJJIGhhcyBiZWVuIHNldCBwcmV2aW91cyB0byB0aGUgY2FsbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgVGhlIGF1dGhvcml6YXRpb24gY29kZSByZXR1cm5lZCBpbiB0aGUgY2FsbGJhY2sgaW4gdGhlIEF1dGhvcml6YXRpb24gQ29kZSBmbG93LlxuICAgKiBAcGFyYW0ge3JlcXVlc3RDYWxsYmFja30gW2NhbGxiYWNrXSBPcHRpb25hbCBjYWxsYmFjayBtZXRob2QgdG8gYmUgY2FsbGVkIGluc3RlYWQgb2YgdGhlIHByb21pc2UuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gQSBwcm9taXNlIHRoYXQgaWYgc3VjY2Vzc2Z1bCwgcmVzb2x2ZXMgaW50byBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYWNjZXNzIHRva2VuLFxuICAgKiAgICAgICAgICByZWZyZXNoIHRva2VuLCB0b2tlbiB0eXBlIGFuZCB0aW1lIHRvIGV4cGlyYXRpb24uIElmIHJlamVjdGVkLCBpdCBjb250YWlucyBhbiBlcnJvciBvYmplY3QuXG4gICAqICAgICAgICAgIE5vdCByZXR1cm5lZCBpZiBhIGNhbGxiYWNrIGlzIGdpdmVuLlxuICAgKi9cbiAgYXV0aG9yaXphdGlvbkNvZGVHcmFudDogZnVuY3Rpb24oY29kZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gQXV0aGVudGljYXRpb25SZXF1ZXN0LmJ1aWxkZXIoKVxuICAgICAgLndpdGhQYXRoKCcvYXBpL3Rva2VuJylcbiAgICAgIC53aXRoQm9keVBhcmFtZXRlcnMoe1xuICAgICAgICBncmFudF90eXBlOiAnYXV0aG9yaXphdGlvbl9jb2RlJyxcbiAgICAgICAgcmVkaXJlY3RfdXJpOiB0aGlzLmdldFJlZGlyZWN0VVJJKCksXG4gICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgIGNsaWVudF9pZDogdGhpcy5nZXRDbGllbnRJZCgpLFxuICAgICAgICBjbGllbnRfc2VjcmV0OiB0aGlzLmdldENsaWVudFNlY3JldCgpXG4gICAgICB9KVxuICAgICAgLndpdGhIZWFkZXJzKHsgJ0NvbnRlbnQtVHlwZScgOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9KVxuICAgICAgLmJ1aWxkKClcbiAgICAgIC5leGVjdXRlKEh0dHBNYW5hZ2VyLnBvc3QsIGNhbGxiYWNrKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVmcmVzaCB0aGUgYWNjZXNzIHRva2VuIGdpdmVuIHRoYXQgaXQgaGFzbid0IGV4cGlyZWQuXG4gICAqIFJlcXVpcmVzIHRoYXQgY2xpZW50IElELCBjbGllbnQgc2VjcmV0IGFuZCByZWZyZXNoIHRva2VuIGhhcyBiZWVuIHNldCBwcmV2aW91cyB0byB0aGUgY2FsbC5cbiAgICogQHBhcmFtIHtyZXF1ZXN0Q2FsbGJhY2t9IFtjYWxsYmFja10gT3B0aW9uYWwgY2FsbGJhY2sgbWV0aG9kIHRvIGJlIGNhbGxlZCBpbnN0ZWFkIG9mIHRoZSBwcm9taXNlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IEEgcHJvbWlzZSB0aGF0IGlmIHN1Y2Nlc3NmdWwsIHJlc29sdmVzIHRvIGFuIG9iamVjdCBjb250YWluaW5nIHRoZVxuICAgKiAgICAgICAgICBhY2Nlc3MgdG9rZW4sIHRpbWUgdG8gZXhwaXJhdGlvbiBhbmQgdG9rZW4gdHlwZS4gSWYgcmVqZWN0ZWQsIGl0IGNvbnRhaW5zIGFuIGVycm9yIG9iamVjdC5cbiAgICogICAgICAgICAgTm90IHJldHVybmVkIGlmIGEgY2FsbGJhY2sgaXMgZ2l2ZW4uXG4gICAqL1xuICByZWZyZXNoQWNjZXNzVG9rZW46IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIEF1dGhlbnRpY2F0aW9uUmVxdWVzdC5idWlsZGVyKClcbiAgICAgIC53aXRoUGF0aCgnL2FwaS90b2tlbicpXG4gICAgICAud2l0aEJvZHlQYXJhbWV0ZXJzKHtcbiAgICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nLFxuICAgICAgICByZWZyZXNoX3Rva2VuOiB0aGlzLmdldFJlZnJlc2hUb2tlbigpXG4gICAgICB9KVxuICAgICAgLndpdGhIZWFkZXJzKHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjpcbiAgICAgICAgICAnQmFzaWMgJyArXG4gICAgICAgICAgbmV3IEJ1ZmZlcihcbiAgICAgICAgICAgIHRoaXMuZ2V0Q2xpZW50SWQoKSArICc6JyArIHRoaXMuZ2V0Q2xpZW50U2VjcmV0KClcbiAgICAgICAgICApLnRvU3RyaW5nKCdiYXNlNjQnKSxcbiAgICAgICAgICAnQ29udGVudC1UeXBlJyA6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICB9KVxuICAgICAgLmJ1aWxkKClcbiAgICAgIC5leGVjdXRlKEh0dHBNYW5hZ2VyLnBvc3QsIGNhbGxiYWNrKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/server-methods.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/server.js":
/*!*********************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/server.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var SpotifyWebApi = __webpack_require__(/*! ./spotify-web-api */ \"(rsc)/./node_modules/spotify-web-api-node/src/spotify-web-api.js\");\nvar ServerMethods = __webpack_require__(/*! ./server-methods */ \"(rsc)/./node_modules/spotify-web-api-node/src/server-methods.js\");\nSpotifyWebApi._addMethods(ServerMethods);\nmodule.exports = SpotifyWebApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3NlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0IsbUJBQU8sQ0FBQywyRkFBbUI7QUFDL0Msb0JBQW9CLG1CQUFPLENBQUMseUZBQWtCO0FBQzlDO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jYXJyaWV5dS9EZXNrdG9wL3Nwb3RpZnkvbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy9zZXJ2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFNwb3RpZnlXZWJBcGkgPSByZXF1aXJlKCcuL3Nwb3RpZnktd2ViLWFwaScpO1xudmFyIFNlcnZlck1ldGhvZHMgPSByZXF1aXJlKCcuL3NlcnZlci1tZXRob2RzJyk7XG5TcG90aWZ5V2ViQXBpLl9hZGRNZXRob2RzKFNlcnZlck1ldGhvZHMpO1xubW9kdWxlLmV4cG9ydHMgPSBTcG90aWZ5V2ViQXBpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/spotify-web-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/spotify-web-api.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar AuthenticationRequest = __webpack_require__(/*! ./authentication-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/authentication-request.js\"),\n  WebApiRequest = __webpack_require__(/*! ./webapi-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/webapi-request.js\"),\n  HttpManager = __webpack_require__(/*! ./http-manager */ \"(rsc)/./node_modules/spotify-web-api-node/src/http-manager.js\");\n\nfunction SpotifyWebApi(credentials) {\n  this._credentials = credentials || {};\n}\n\nSpotifyWebApi.prototype = {\n  setCredentials: function(credentials) {\n    for (var key in credentials) {\n      if (credentials.hasOwnProperty(key)) {\n        this._credentials[key] = credentials[key];\n      }\n    }\n  },\n\n  getCredentials: function() {\n    return this._credentials;\n  },\n\n  resetCredentials: function() {\n    this._credentials = null;\n  },\n\n  setClientId: function(clientId) {\n    this._setCredential('clientId', clientId);\n  },\n\n  setClientSecret: function(clientSecret) {\n    this._setCredential('clientSecret', clientSecret);\n  },\n\n  setAccessToken: function(accessToken) {\n    this._setCredential('accessToken', accessToken);\n  },\n\n  setRefreshToken: function(refreshToken) {\n    this._setCredential('refreshToken', refreshToken);\n  },\n\n  setRedirectURI: function(redirectUri) {\n    this._setCredential('redirectUri', redirectUri);\n  },\n\n  getRedirectURI: function() {\n    return this._getCredential('redirectUri');\n  },\n\n  getClientId: function() {\n    return this._getCredential('clientId');\n  },\n\n  getClientSecret: function() {\n    return this._getCredential('clientSecret');\n  },\n\n  getAccessToken: function() {\n    return this._getCredential('accessToken');\n  },\n\n  getRefreshToken: function() {\n    return this._getCredential('refreshToken');\n  },\n\n  resetClientId: function() {\n    this._resetCredential('clientId');\n  },\n\n  resetClientSecret: function() {\n    this._resetCredential('clientSecret');\n  },\n\n  resetAccessToken: function() {\n    this._resetCredential('accessToken');\n  },\n\n  resetRefreshToken: function() {\n    this._resetCredential('refreshToken');\n  },\n\n  resetRedirectURI: function() {\n    this._resetCredential('redirectUri');\n  },\n\n  _setCredential: function(credentialKey, value) {\n    this._credentials = this._credentials || {};\n    this._credentials[credentialKey] = value;\n  },\n\n  _getCredential: function(credentialKey) {\n    if (!this._credentials) {\n      return;\n    } else {\n      return this._credentials[credentialKey];\n    }\n  },\n\n  _resetCredential: function(credentialKey) {\n    if (!this._credentials) {\n      return;\n    } else {\n      this._credentials[credentialKey] = null;\n    }\n  },\n\n  /**\n   * Look up a track.\n   * @param {string} trackId The track's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getTrack('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the track. Not returned if a callback is given.\n   */\n  getTrack: function(trackId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/tracks/' + trackId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several tracks.\n   * @param {string[]} trackIds The IDs of the artists.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */\n  getTracks: function(trackIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/tracks')\n      .withQueryParameters(\n        {\n          ids: trackIds.join(',')\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up an album.\n   * @param {string} albumId The album's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbum('0sNOF9WDwhWunNAHPD3Baj').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the album. Not returned if a callback is given.\n   */\n  getAlbum: function(albumId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/albums/' + albumId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several albums.\n   * @param {string[]} albumIds The IDs of the albums.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbums(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the albums. Not returned if a callback is given.\n   */\n  getAlbums: function(albumIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/albums')\n      .withQueryParameters(\n        {\n          ids: albumIds.join(',')\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up an artist.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example api.getArtist('1u7kkVrr14iBvrpYnZILJR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artist. Not returned if a callback is given.\n   */\n  getArtist: function(artistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists/' + artistId)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several artists.\n   * @param {string[]} artistIds The IDs of the artists.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */\n  getArtists: function(artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists')\n      .withQueryParameters({\n        ids: artistIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Search for music entities of certain types.\n   * @param {string} query The search query.\n   * @param {string[]} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', 'track', 'show', and 'episode'.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example search('Abba', ['track', 'playlist'], { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  search: function(query, types, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/search/')\n      .withQueryParameters(\n        {\n          type: types.join(','),\n          q: query\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Search for an album.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchAlbums('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchAlbums: function(query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  },\n\n  /**\n   * Search for an artist.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchArtists('David Bowie', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchArtists: function(query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  },\n\n  /**\n   * Search for a track.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchTracks('Mr. Brightside', { limit : 3, offset : 2 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchTracks: function(query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  },\n\n  /**\n   * Search for playlists.\n   * @param {string} query The search query.\n   * @param {Object} options The possible options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchPlaylists('workout', { limit : 1, offset : 0 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchPlaylists: function(query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  },\n\n  /**\n   * Get an artist's albums.\n   * @param {string} artistId The artist's ID.\n   * @options {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistAlbums('0oSGxfWSnnOXhD2fKuz2Gy', { album_type : 'album', country : 'GB', limit : 2, offset : 5 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the albums\n   *          for the given artist. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  getArtistAlbums: function(artistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists/' + artistId + '/albums')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the tracks of an album.\n   * @param albumId the album's ID.\n   * @options {Object} [options] The possible options, e.g. limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    tracks in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */\n  getAlbumTracks: function(albumId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/albums/' + albumId + '/tracks')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get an artist's top tracks.\n   * @param {string} artistId The artist's ID.\n   * @param {string} country The country/territory where the tracks are most popular. (format: ISO 3166-1 alpha-2)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          artist's top tracks in the given country. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  getArtistTopTracks: function(artistId, country, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists/' + artistId + '/top-tracks')\n      .withQueryParameters({\n        country: country\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get related artists.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistRelatedArtists('0oSGxfWSnnOXhD2fKuz2Gy').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          related artists. If the promise is rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getArtistRelatedArtists: function(artistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists/' + artistId + '/related-artists')\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get information about a user.\n   * @param userId The user ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUser('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getUser: function(userId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/users/' + encodeURIComponent(userId))\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get information about the user that has signed in (the current user).\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getMe().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. The amount of information\n   *          depends on the permissions given by the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getMe: function(callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me')\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get a user's playlists.\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUserPlaylists('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of playlists. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getUserPlaylists: function(userId, options, callback) {\n    var path;\n    if (typeof userId === 'string') {\n      path = '/v1/users/' + encodeURIComponent(userId) + '/playlists';\n    } else if (typeof userId === 'object') {\n      callback = options;\n      options = userId;\n      path = '/v1/me/playlists';\n    } /* undefined */ else {\n      path = '/v1/me/playlists';\n    }\n\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath(path)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylist('3EsfV6XzCHU8SPNdbnFogK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getPlaylist: function(playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get tracks in a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] Optional options, such as fields.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylistTracks('3ktAYNcRHpazJ9qecm3ptn').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object that containing\n   * the tracks in the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getPlaylistTracks: function(playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Create a playlist.\n   * @param {string} [name] The name of the playlist.\n   * @param {Object} [options] The possible options, being description, collaborative and public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example createPlaylist('My playlist', {''description': 'My description', 'collaborative' : false, 'public': true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing information about the\n   *          created playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  createPlaylist: function(name, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/playlists')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({\n        name : name,\n      }, options)\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Follow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, currently only public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  followPlaylist: function(playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/followers')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(options)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Unfollow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  unfollowPlaylist: function(playlistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/followers')\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Change playlist details.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, e.g. name, public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example changePlaylistDetails('3EsfV6XzCHU8SPNdbnFogK', {name: 'New name', public: true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  changePlaylistDetails: function(playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId)\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(options)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Replace the image used to represent a specific playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string} base64URI Base64 encoded JPEG image data, maximum payload size is 256 KB\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example uploadCustomPlaylistCoverImage('3EsfV6XzCHU8SPNdbnFogK', 'longbase64uri').then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  uploadCustomPlaylistCoverImage: function(playlistId, base64URI, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/images')\n      .withHeaders({ 'Content-Type': 'image/jpeg' })\n      .withBodyParameters(base64URI)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Add tracks to a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string[]} tracks URIs of the tracks to add to the playlist.\n   * @param {Object} [options] Options, position being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example addTracksToPlaylist('3EsfV6XzCHU8SPNdbnFogK',\n              '[\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]').then(...)\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  addTracksToPlaylist: function(playlistId, tracks, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withQueryParameters(options)\n      .withBodyParameters({\n        uris: tracks\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Remove tracks from a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} tracks An array of objects containing a property called uri with the track URI (String), and\n   * an optional property called positions (int[]), e.g. { uri : \"spotify:track:491rM2JN8KvmV6p0oDDuJT\", positions : [0, 15] }\n   * @param {Object} options Options, snapshot_id being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  removeTracksFromPlaylist: function(playlistId, tracks, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(\n        {\n          tracks: tracks\n        }, \n        options\n      )\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Remove tracks from a playlist by position instead of specifying the tracks' URIs.\n   * @param {string} playlistId The playlist's ID\n   * @param {int[]} positions The positions of the tracks in the playlist that should be removed\n   * @param {string} snapshot_id The snapshot ID, or version, of the playlist. Required\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  removeTracksFromPlaylistByPosition: function(\n    playlistId,\n    positions,\n    snapshotId,\n    callback\n  ) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({\n        positions: positions,\n        snapshot_id: snapshotId\n      })\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Replace tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} uris An array of track URIs (strings)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  replaceTracksInPlaylist: function(playlistId, uris, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({\n        uris: uris\n      })\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Reorder tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {int} rangeStart The position of the first track to be reordered.\n   * @param {int} insertBefore The position where the tracks should be inserted.\n   * @param {Object} options Optional parameters, i.e. range_length and snapshot_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  reorderTracksInPlaylist: function(\n    playlistId,\n    rangeStart,\n    insertBefore,\n    options,\n    callback\n  ) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(\n        {\n          range_start: rangeStart,\n          insert_before: insertBefore\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioFeaturesForTrack: function(trackId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/audio-features/' + trackId)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioAnalysisForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio analysis. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioAnalysisForTrack: function(trackId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/audio-analysis/' + trackId)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get audio features for multiple tracks identified by their unique Spotify ID.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTracks(['38P3Q4QcdjQALGF2Z92BmR', '2HO2bnoMrpnZUbUqiilLHi']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features for the tracks. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioFeaturesForTracks: function(trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/audio-features')\n      .withQueryParameters({\n        ids: trackIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getRecommendations({ min_energy: 0.4, seed_artists: ['6mfK6Q2tzLMEchAr0e9Uzu', '4DYFVNKZ1uixa6SQTvzQwJ'], min_popularity: 50 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of tracks and a list of seeds. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getRecommendations: function(options, callback) {\n    var _opts = {};\n    var optionsOfTypeArray = ['seed_artists', 'seed_genres', 'seed_tracks'];\n    for (var option in options) {\n      if (options.hasOwnProperty(option)) {\n        if (\n          optionsOfTypeArray.indexOf(option) !== -1 &&\n          Object.prototype.toString.call(options[option]) === '[object Array]'\n        ) {\n          _opts[option] = options[option].join(',');\n        } else {\n          _opts[option] = options[option];\n        }\n      }\n    }\n\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/recommendations')\n      .withQueryParameters(_opts)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAvailableGenreSeeds().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of available genres to be used as seeds for recommendations.\n   *          If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAvailableGenreSeeds: function(callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/recommendations/available-genre-seeds')\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve the tracks that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist track objects. Not returned if a callback is given.\n   */\n  getMySavedTracks: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/tracks')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the track ID in the request.\n   * The boolean value of true indicates that the track is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedTracks: function(trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/tracks/contains')\n      .withQueryParameters({\n        ids: trackIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Remove a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedTracks: function(trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({ ids: trackIds })\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Add a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedTracks: function(trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({ ids: trackIds })\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Remove an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedAlbums: function(albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/albums')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(albumIds)\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Add an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedAlbums: function(albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/albums')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(albumIds)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Retrieve the albums that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist album objects. Not returned if a callback is given.\n   */\n  getMySavedAlbums: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/albums')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the album ID in the request.\n   * The boolean value of true indicates that the album is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedAlbums: function(albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/albums/contains')\n      .withQueryParameters({\n        ids: albumIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the current user's top artists based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of artists,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyTopArtists: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/top/artists')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the current user's top tracks based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyTopTracks: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/top/tracks')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the Current User's Recently Played Tracks\n   * @param {Object} [options] Options, being type, after, limit, before.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of play history objects,\n   *          otherwise an error. Not returned if a callback is given. Note that the response will be empty\n   *          in case the user has enabled private session.\n   */\n  getMyRecentlyPlayedTracks: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/recently-played')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Add track or episode to device queue\n   * @param {string} [uri] uri of the track or episode to add\n   * @param {Object} [options] Options, being device_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  addToQueue: function(uri, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/queue')\n      .withQueryParameters(\n        {\n          uri: uri\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n\n  /** \n   * Get the Current User's Available Devices\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of device objects,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyDevices: function(callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/devices')\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the Current User's Currently Playing Track.\n   * @param {Object} [options] Options, being market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyCurrentPlayingTrack: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/currently-playing')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get Information About The User's Current Playback State\n   * @param {Object} [options] Options, being market and additional_types.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyCurrentPlaybackState: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Transfer a User's Playback\n   * @param {string[]} [deviceIds] An _array_ containing a device ID on which playback should be started/transferred. \n   * (NOTE: The API is currently only supporting a single device ID.)\n   * @param {Object} [options] Options, the only one being 'play'.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  transferMyPlayback: function(deviceIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(\n        {\n          device_ids: deviceIds,\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Starts o Resumes the Current User's Playback\n   * @param {Object} [options] Options, being device_id, context_uri, offset, uris, position_ms.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example play({context_uri: 'spotify:album:5ht7ItJgpBH7W6vJ5BqpPr'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  play: function(options, callback) {\n    /*jshint camelcase: false */\n    var _options = options || {};\n    var queryParams = _options.device_id\n      ? { device_id: _options.device_id }\n      : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function(field) {\n      if (field in _options) {\n        postData[field] = _options[field];\n      }\n    });\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/play')\n      .withQueryParameters(queryParams)\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(postData)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Pauses the Current User's Playback\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example pause().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  pause: function(options, callback) {\n    return (\n      WebApiRequest.builder(this.getAccessToken())\n        .withPath('/v1/me/player/pause')\n        /*jshint camelcase: false */\n        .withQueryParameters(\n          options && options.device_id ? { device_id: options.device_id } : null\n        )\n        .withHeaders({ 'Content-Type': 'application/json' })\n        .build()\n        .execute(HttpManager.put, callback)\n    );\n  },\n\n  /**\n   * Skip the Current User's Playback To Previous Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToPrevious().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  skipToPrevious: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/previous')\n      .withQueryParameters(\n        options && options.device_id ? { device_id: options.device_id } : null\n      )\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Skip the Current User's Playback To Next Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToNext().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  skipToNext: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/next')\n      .withQueryParameters(\n        options && options.device_id ? { device_id: options.device_id } : null\n      )\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   *\n   * @param {number} positionMs The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  seek: function(positionMs, options, callback) {\n    var params = {\n      /* jshint camelcase: false */\n      position_ms: positionMs\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/seek')\n      .withQueryParameters(params)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Set Repeat Mode On The Current User's Playback\n   * @param {string} [state] State (track, context, or off)\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setRepeat('context', {}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  setRepeat: function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/repeat')\n      .withQueryParameters(params)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Set Shuffle Mode On The Current User's Playback\n   * @param {boolean} [state] State \n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setShuffle({state: 'false'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  setShuffle: function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/shuffle')\n      .withQueryParameters(params)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * @param {number} volumePercent The volume to set. Must be a value from 0 to 100.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  setVolume: function(volumePercent, options, callback) {\n    var params = {\n      /* jshint camelcase: false */\n      volume_percent: volumePercent\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/volume')\n      .withQueryParameters(params)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Add the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  followUsers: function(userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Add the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  followArtists: function(artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Remove the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  unfollowUsers: function(userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Remove the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  unfollowArtists: function(artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Check to see if the current user is following one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the users IDs in the request.\n   *          The boolean value of true indicates that the user is following that user, otherwise is not.\n   *          Not returned if a callback is given.\n   */\n  isFollowingUsers: function(userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following/contains')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the current user's followed artists.\n   * @param {Object} [options] Options, being after and limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */\n  getFollowedArtists: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters(\n        {\n          type: 'artist'\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check if users are following a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {String[]} User IDs of the following users\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an array of booleans. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  areFollowingPlaylist: function(userId, playlistId, followerIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath(\n        '/v1/users/' +\n          encodeURIComponent(userId) +\n          '/playlists/' +\n          playlistId +\n          '/followers/contains'\n      )\n      .withQueryParameters({\n        ids: followerIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check to see if the current user is following one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the artists IDs in the request.\n   *          The boolean value of true indicates that the user is following that artist, otherwise is not.\n   *          Not returned if a callback is given.\n   */\n  isFollowingArtists: function(artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following/contains')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve new releases\n   * @param {Object} [options] Options, being country, limit and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */\n  getNewReleases: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/new-releases')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve featured playlists\n   * @param {Object} [options] Options, being country, locale, timestamp, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * featured playlists. Not returned if a callback is given.\n   */\n  getFeaturedPlaylists: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/featured-playlists')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve a list of categories used to tag items in Spotify (e.g. in the 'Browse' tab)\n   * @param {Object} [options] Options, being country, locale, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object of categories.\n   * Not returned if a callback is given.\n   */\n  getCategories: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/categories')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve a category.\n   * @param {string} categoryId The id of the category to retrieve.\n   * @param {Object} [options] Options, being country, locale.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a category object.\n   * Not returned if a callback is given.\n   */\n  getCategory: function(categoryId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/categories/' + categoryId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve playlists for a category.\n   * @param {string} categoryId The id of the category to retrieve playlists for.\n   * @param {Object} [options] Options, being country, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to a paging object containing simple playlists.\n   * Not returned if a callback is given.\n   */\n  getPlaylistsForCategory: function(categoryId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/categories/' + categoryId + '/playlists')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get a show.\n   * @param {string} showId The show's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShow('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the show. Not returned if a callback is given.\n   */\n  getShow: function(showId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n    .withPath('/v1/shows/' + showId)\n    .withQueryParameters(options)\n    .build()\n    .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several shows.\n   * @param {string[]} showIds The IDs of the shows.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShows(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the shows. Not returned if a callback is given.\n   */\n  getShows: function(showIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/shows')\n      .withQueryParameters(\n        {\n          ids: showIds.join(',')\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check if one or more shows is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the show ID in the request.\n   * The boolean value of true indicates that the show is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedShows: function(showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/shows/contains')\n      .withQueryParameters({\n        ids: showIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Remove an show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedShows: function(showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/shows')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(showIds)\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Add a show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedShows: function(showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/shows')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(showIds)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Retrieve the shows that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist show objects. Not returned if a callback is given.\n   */\n  getMySavedShows: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/shows')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the episodes of an show.\n   * @param showId the show's ID.\n   * @options {Object} [options] The possible options, being limit, offset, and market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShowEpisodes('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    episodes in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */\n  getShowEpisodes: function(showId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/shows/' + showId + '/episodes')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Search for a show.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchShows('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchShows: function(query, options, callback) {\n    return this.search(query, ['show'], options, callback);\n  },\n\n  /**\n   * Search for an episode.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchEpisodes('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchEpisodes: function(query, options, callback) {\n    return this.search(query, ['episode'], options, callback);\n  },\n\n /**\n   * Look up an episode.\n   * @param {string} episodeId The episode's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisode('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episode. Not returned if a callback is given.\n   */\n  getEpisode: function(episodeId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/episodes/' + episodeId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several episodes.\n   * @param {string[]} episodeIds The IDs of the episodes.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisodes(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episodes. Not returned if a callback is given.\n   */\n  getEpisodes: function(episodeIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/episodes')\n      .withQueryParameters(\n        {\n          ids: episodeIds.join(',')\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n};\n\nSpotifyWebApi._addMethods = function(methods) {\n  for (var i in methods) {\n    if (methods.hasOwnProperty(i)) {\n      this.prototype[i] = methods[i];\n    }\n  }\n};\n\nmodule.exports = SpotifyWebApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/spotify-web-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/webapi-request.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/webapi-request.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Request = __webpack_require__(/*! ./base-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/base-request.js\");\n\nvar DEFAULT_HOST = 'api.spotify.com',\n  DEFAULT_PORT = 443,\n  DEFAULT_SCHEME = 'https';\n\nmodule.exports.builder = function(accessToken) {\n  return Request.builder()\n    .withHost(DEFAULT_HOST)\n    .withPort(DEFAULT_PORT)\n    .withScheme(DEFAULT_SCHEME)\n    .withAuth(accessToken);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3dlYmFwaS1yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxxRkFBZ0I7O0FBRXRDO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvY2FycmlleXUvRGVza3RvcC9zcG90aWZ5L25vZGVfbW9kdWxlcy9zcG90aWZ5LXdlYi1hcGktbm9kZS9zcmMvd2ViYXBpLXJlcXVlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVxdWVzdCA9IHJlcXVpcmUoJy4vYmFzZS1yZXF1ZXN0Jyk7XG5cbnZhciBERUZBVUxUX0hPU1QgPSAnYXBpLnNwb3RpZnkuY29tJyxcbiAgREVGQVVMVF9QT1JUID0gNDQzLFxuICBERUZBVUxUX1NDSEVNRSA9ICdodHRwcyc7XG5cbm1vZHVsZS5leHBvcnRzLmJ1aWxkZXIgPSBmdW5jdGlvbihhY2Nlc3NUb2tlbikge1xuICByZXR1cm4gUmVxdWVzdC5idWlsZGVyKClcbiAgICAud2l0aEhvc3QoREVGQVVMVF9IT1NUKVxuICAgIC53aXRoUG9ydChERUZBVUxUX1BPUlQpXG4gICAgLndpdGhTY2hlbWUoREVGQVVMVF9TQ0hFTUUpXG4gICAgLndpdGhBdXRoKGFjY2Vzc1Rva2VuKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/webapi-request.js\n");

/***/ })

};
;