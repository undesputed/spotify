"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_services_youtube-music-service_ts";
exports.ids = ["_rsc_lib_services_youtube-music-service_ts"];
exports.modules = {

/***/ "(rsc)/./lib/services/youtube-music-service.ts":
/*!***********************************************!*\
  !*** ./lib/services/youtube-music-service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeMusicService: () => (/* binding */ YouTubeMusicService),\n/* harmony export */   youtubeMusicService: () => (/* binding */ youtubeMusicService)\n/* harmony export */ });\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! googleapis */ \"(rsc)/./node_modules/googleapis/build/src/index.js\");\n/* harmony import */ var _lib_supabase_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase/service */ \"(rsc)/./lib/supabase/service.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase/server */ \"(rsc)/./lib/supabase/server.ts\");\n\n\n\nclass YouTubeMusicService {\n    constructor(){\n        this.accessToken = null;\n        this.refreshToken = null;\n        this.expiresAt = null;\n        this.oauth2Client = new googleapis__WEBPACK_IMPORTED_MODULE_2__.google.auth.OAuth2(process.env.YOUTUBE_CLIENT_ID, process.env.YOUTUBE_CLIENT_SECRET, `${\"https://3d686033c4c8.ngrok-free.app\"}/auth/youtube/callback`);\n        this.youtubeApi = googleapis__WEBPACK_IMPORTED_MODULE_2__.google.youtube('v3');\n    }\n    // Initialize with user tokens\n    async initialize(userId) {\n        try {\n            const userServices = await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_0__.supabaseService.getUserServices(userId);\n            const youtubeService = userServices.find((s)=>s.service_id === 'youtube_music');\n            if (!youtubeService || !youtubeService.access_token) {\n                return false;\n            }\n            this.accessToken = youtubeService.access_token;\n            this.refreshToken = youtubeService.refresh_token;\n            this.expiresAt = youtubeService.expires_at ? new Date(youtubeService.expires_at).getTime() : null;\n            this.oauth2Client.setCredentials({\n                access_token: this.accessToken,\n                refresh_token: this.refreshToken,\n                expiry_date: this.expiresAt\n            });\n            // Refresh token if expired\n            if (this.expiresAt && Date.now() >= this.expiresAt) {\n                await this.refreshAccessToken(userId);\n            }\n            return true;\n        } catch (error) {\n            console.error('Failed to initialize YouTube Music service:', error);\n            return false;\n        }\n    }\n    // Refresh access token\n    async refreshAccessToken(userId) {\n        if (!this.refreshToken) throw new Error('No refresh token available');\n        try {\n            const { credentials } = await this.oauth2Client.refreshAccessToken();\n            this.accessToken = credentials.access_token;\n            this.expiresAt = credentials.expiry_date;\n            this.oauth2Client.setCredentials(credentials);\n            // Update tokens in database\n            await _lib_supabase_service__WEBPACK_IMPORTED_MODULE_0__.supabaseService.connectService({\n                user_id: userId,\n                service_id: 'youtube_music',\n                access_token: this.accessToken,\n                refresh_token: this.refreshToken,\n                expires_at: new Date(this.expiresAt).toISOString(),\n                is_active: true\n            });\n        } catch (error) {\n            console.error('Failed to refresh YouTube access token:', error);\n            throw error;\n        }\n    }\n    // Get authorization URL for OAuth\n    getAuthorizationUrl(state) {\n        const scopes = [\n            'https://www.googleapis.com/auth/youtube.readonly',\n            'https://www.googleapis.com/auth/youtube.force-ssl'\n        ];\n        return this.oauth2Client.generateAuthUrl({\n            access_type: 'offline',\n            scope: scopes,\n            state: state || 'state'\n        });\n    }\n    // Handle OAuth callback\n    async handleCallback(code, userId) {\n        try {\n            const { tokens } = await this.oauth2Client.getToken(code);\n            this.accessToken = tokens.access_token;\n            this.refreshToken = tokens.refresh_token;\n            this.expiresAt = tokens.expiry_date;\n            this.oauth2Client.setCredentials(tokens);\n            // Get user profile\n            const { data: profile } = await this.youtubeApi.channels.list({\n                auth: this.oauth2Client,\n                part: [\n                    'snippet'\n                ],\n                mine: true\n            });\n            const channel = profile.items?.[0];\n            const serviceUserId = channel?.id || 'unknown';\n            const serviceUsername = channel?.snippet?.title || 'YouTube User';\n            // Save to database using server-side service (bypasses RLS)\n            await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServerService.connectService({\n                user_id: userId,\n                service_id: 'youtube_music',\n                access_token: this.accessToken,\n                refresh_token: this.refreshToken,\n                expires_at: new Date(this.expiresAt).toISOString(),\n                is_active: true,\n                service_user_id: serviceUserId,\n                service_username: serviceUsername\n            });\n        } catch (error) {\n            console.error('Failed to handle YouTube callback:', error);\n            throw error;\n        }\n    }\n    // Search tracks (using YouTube Data API)\n    async searchTracks(query, limit = 20) {\n        try {\n            const response = await this.youtubeApi.search.list({\n                auth: this.oauth2Client,\n                part: [\n                    'snippet'\n                ],\n                q: `${query} music`,\n                type: [\n                    'video'\n                ],\n                videoCategoryId: '10',\n                maxResults: limit,\n                order: 'relevance'\n            });\n            if (!response.data.items) return [];\n            // Get detailed video information\n            const videoIds = response.data.items.map((item)=>item.id.videoId);\n            const videoDetails = await this.getVideoDetails(videoIds);\n            return response.data.items.map((item, index)=>this.mapYouTubeTrack(item, videoDetails[index])).filter(Boolean);\n        } catch (error) {\n            console.error('Failed to search YouTube tracks:', error);\n            return [];\n        }\n    }\n    // Get video details\n    async getVideoDetails(videoIds) {\n        try {\n            const response = await this.youtubeApi.videos.list({\n                auth: this.oauth2Client,\n                part: [\n                    'snippet',\n                    'contentDetails',\n                    'statistics'\n                ],\n                id: videoIds\n            });\n            return response.data.items || [];\n        } catch (error) {\n            console.error('Failed to get video details:', error);\n            return [];\n        }\n    }\n    // Get user's liked videos (requires OAuth)\n    async getLikedTracks(limit = 50, pageToken) {\n        try {\n            const response = await this.youtubeApi.videos.list({\n                auth: this.oauth2Client,\n                part: [\n                    'snippet',\n                    'contentDetails',\n                    'statistics'\n                ],\n                myRating: 'like',\n                maxResults: limit,\n                pageToken\n            });\n            if (!response.data.items) return [];\n            return response.data.items.map((item)=>this.mapYouTubeTrack(item, item)).filter(Boolean);\n        } catch (error) {\n            console.error('Failed to get liked tracks:', error);\n            return [];\n        }\n    }\n    // Get user's playlists\n    async getUserPlaylists(limit = 50, pageToken) {\n        try {\n            const response = await this.youtubeApi.playlists.list({\n                auth: this.oauth2Client,\n                part: [\n                    'snippet',\n                    'contentDetails'\n                ],\n                mine: true,\n                maxResults: limit,\n                pageToken\n            });\n            if (!response.data.items) return [];\n            return await Promise.all(response.data.items.map((playlist)=>this.mapYouTubePlaylist(playlist)));\n        } catch (error) {\n            console.error('Failed to get user playlists:', error);\n            return [];\n        }\n    }\n    // Get playlist tracks\n    async getPlaylistTracks(playlistId, limit = 50, pageToken) {\n        try {\n            const response = await this.youtubeApi.playlistItems.list({\n                auth: this.oauth2Client,\n                part: [\n                    'snippet'\n                ],\n                playlistId,\n                maxResults: limit,\n                pageToken\n            });\n            if (!response.data.items) return [];\n            const videoIds = response.data.items.map((item)=>item.snippet.resourceId.videoId);\n            const videoDetails = await this.getVideoDetails(videoIds);\n            return response.data.items.map((item, index)=>this.mapYouTubeTrack(item, videoDetails[index])).filter(Boolean);\n        } catch (error) {\n            console.error('Failed to get playlist tracks:', error);\n            return [];\n        }\n    }\n    // Map YouTube API response to our track format\n    mapYouTubeTrack(item, details) {\n        try {\n            const snippet = item.snippet || details?.snippet;\n            const statistics = details?.statistics || {};\n            const contentDetails = details?.contentDetails;\n            if (!snippet) return null;\n            // Parse duration (ISO 8601 format)\n            const duration = this.parseDuration(contentDetails?.duration || 'PT0S');\n            // Extract artist and title from video title\n            const { artist, title } = this.parseVideoTitle(snippet.title);\n            return {\n                id: `youtube_${item.id?.videoId || item.id}`,\n                title: title || snippet.title,\n                artist: artist || snippet.channelTitle,\n                album: undefined,\n                duration,\n                artwork: snippet.thumbnails?.high?.url || snippet.thumbnails?.medium?.url || '',\n                videoId: item.id?.videoId || item.id,\n                channelId: snippet.channelId,\n                channelTitle: snippet.channelTitle,\n                publishedAt: snippet.publishedAt,\n                viewCount: parseInt(statistics.viewCount || '0'),\n                likeCount: parseInt(statistics.likeCount || '0'),\n                description: snippet.description,\n                tags: snippet.tags || [],\n                serviceId: 'youtube_music',\n                originalId: item.id?.videoId || item.id,\n                availableServices: [\n                    'youtube_music'\n                ]\n            };\n        } catch (error) {\n            console.error('Failed to map YouTube track:', error);\n            return null;\n        }\n    }\n    // Map YouTube playlist\n    async mapYouTubePlaylist(playlist) {\n        const snippet = playlist.snippet;\n        return {\n            id: `youtube_${playlist.id}`,\n            title: snippet.title,\n            description: snippet.description,\n            creator: {\n                id: snippet.channelId,\n                name: snippet.channelTitle,\n                image: snippet.thumbnails?.high?.url\n            },\n            tracks: [],\n            artwork: snippet.thumbnails?.high?.url || snippet.thumbnails?.medium?.url || '',\n            isPublic: snippet.privacyStatus === 'public',\n            isLiked: false,\n            followers: 0,\n            createdAt: snippet.publishedAt,\n            updatedAt: snippet.publishedAt,\n            serviceId: 'youtube_music',\n            originalId: playlist.id,\n            availableServices: [\n                'youtube_music'\n            ]\n        };\n    }\n    // Parse ISO 8601 duration to seconds\n    parseDuration(duration) {\n        const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || '0');\n        const minutes = parseInt(match[2] || '0');\n        const seconds = parseInt(match[3] || '0');\n        return hours * 3600 + minutes * 60 + seconds;\n    }\n    // Parse video title to extract artist and title\n    parseVideoTitle(title) {\n        // Common patterns: \"Artist - Title\", \"Artist: Title\", \"Artist | Title\"\n        const patterns = [\n            /^(.+?)\\s*[-–—]\\s*(.+)$/,\n            /^(.+?)\\s*:\\s*(.+)$/,\n            /^(.+?)\\s*\\|\\s*(.+)$/,\n            /^(.+?)\\s*•\\s*(.+)$/ // Artist • Title\n        ];\n        for (const pattern of patterns){\n            const match = title.match(pattern);\n            if (match) {\n                return {\n                    artist: match[1].trim(),\n                    title: match[2].trim()\n                };\n            }\n        }\n        // If no pattern matches, assume the whole title is the song title\n        return {\n            artist: '',\n            title: title.trim()\n        };\n    }\n    // Search using API key (for public searches without OAuth)\n    async searchTracksPublic(query, limit = 20) {\n        try {\n            const response = await this.youtubeApi.search.list({\n                key: process.env.YOUTUBE_API_KEY,\n                part: [\n                    'snippet'\n                ],\n                q: `${query} music`,\n                type: [\n                    'video'\n                ],\n                videoCategoryId: '10',\n                maxResults: limit,\n                order: 'relevance'\n            });\n            if (!response.data.items) return [];\n            // Get detailed video information\n            const videoIds = response.data.items.map((item)=>item.id.videoId);\n            const videoDetails = await this.getVideoDetailsPublic(videoIds);\n            return response.data.items.map((item, index)=>this.mapYouTubeTrack(item, videoDetails[index])).filter(Boolean);\n        } catch (error) {\n            console.error('Failed to search YouTube tracks (public):', error);\n            return [];\n        }\n    }\n    // Get video details using API key\n    async getVideoDetailsPublic(videoIds) {\n        try {\n            const response = await this.youtubeApi.videos.list({\n                key: process.env.YOUTUBE_API_KEY,\n                part: [\n                    'snippet',\n                    'contentDetails',\n                    'statistics'\n                ],\n                id: videoIds\n            });\n            return response.data.items || [];\n        } catch (error) {\n            console.error('Failed to get video details (public):', error);\n            return [];\n        }\n    }\n}\n// Export singleton instance\nconst youtubeMusicService = new YouTubeMusicService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/youtube-music-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase/client.ts":
/*!********************************!*\
  !*** ./lib/supabase/client.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ createClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\nfunction createClient() {\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createBrowserClient)(\"https://nvwrmmuyzxanjvsadtfh.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52d3JtbXV5enhhbmp2c2FkdGZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3MjgzNjQsImV4cCI6MjA3MTMwNDM2NH0.8k1x6zfO0KO9ExeDKcPP4FbaCA-BezxJWGHnNJ0VhQU\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UvY2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1EO0FBRTVDLFNBQVNDO0lBQ2QsT0FBT0Qsa0VBQW1CQSxDQUN4QkUsMENBQW9DLEVBQ3BDQSxrTkFBeUM7QUFFN0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jYXJyaWV5dS9EZXNrdG9wL3Nwb3RpZnkvbGliL3N1cGFiYXNlL2NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVCcm93c2VyQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3NzcidcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudCgpIHtcbiAgcmV0dXJuIGNyZWF0ZUJyb3dzZXJDbGllbnQoXG4gICAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMISxcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSFcbiAgKVxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZUJyb3dzZXJDbGllbnQiLCJjcmVhdGVDbGllbnQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase/client.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase/service.ts":
/*!*********************************!*\
  !*** ./lib/supabase/service.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseService: () => (/* binding */ SupabaseService),\n/* harmony export */   supabaseService: () => (/* binding */ supabaseService)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/./lib/supabase/client.ts\");\n\nclass SupabaseService {\n    // =====================================================\n    // USER OPERATIONS\n    // =====================================================\n    async getCurrentUser() {\n        const { data: { user } } = await this.supabase.auth.getUser();\n        if (!user) return null;\n        const { data, error } = await this.supabase.from('users').select('*').eq('id', user.id).single();\n        if (error) throw error;\n        return data;\n    }\n    async createUser(userData) {\n        const { data, error } = await this.supabase.from('users').insert(userData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async updateUser(userId, updates) {\n        const { data, error } = await this.supabase.from('users').update(updates).eq('id', userId).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // ARTIST OPERATIONS\n    // =====================================================\n    async getArtists(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('artists').select('*').order('name').range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getArtist(id) {\n        const { data, error } = await this.supabase.from('artists').select('*').eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async searchArtists(query, limit = 20) {\n        const { data, error } = await this.supabase.from('artists').select('*').ilike('name', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    async createArtist(artistData) {\n        const { data, error } = await this.supabase.from('artists').insert(artistData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // ALBUM OPERATIONS\n    // =====================================================\n    async getAlbums(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*)\n      `).order('release_date', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getAlbum(id) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*),\n        tracks:tracks(*)\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async getAlbumsByArtist(artistId) {\n        const { data, error } = await this.supabase.from('albums').select('*').eq('artist_id', artistId).order('release_date', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async searchAlbums(query, limit = 20) {\n        const { data, error } = await this.supabase.from('albums').select(`\n        *,\n        artist:artists(*)\n      `).ilike('title', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // TRACK OPERATIONS\n    // =====================================================\n    async getTracks(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*)\n      `).order('title').range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getTrack(id) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*),\n        track_services(*)\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async getTracksByAlbum(albumId) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*)\n      `).eq('album_id', albumId).order('track_number');\n        if (error) throw error;\n        return data;\n    }\n    async searchTracks(query, limit = 20) {\n        const { data, error } = await this.supabase.from('tracks').select(`\n        *,\n        artist:artists(*),\n        album:albums(*)\n      `).ilike('title', `%${query}%`).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    async createTrack(trackData) {\n        const { data, error } = await this.supabase.from('tracks').insert(trackData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getTrackServices(trackId) {\n        const { data, error } = await this.supabase.from('track_services').select('*').eq('track_id', trackId).eq('is_available', true);\n        if (error) throw error;\n        return data;\n    }\n    async addTrackService(trackServiceData) {\n        const { data, error } = await this.supabase.from('track_services').insert(trackServiceData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getBestStreamUrl(trackId, preferredQuality = 'high') {\n        const { data, error } = await this.supabase.from('track_services').select('stream_url, quality').eq('track_id', trackId).eq('is_available', true).order('quality', {\n            ascending: false\n        }).limit(1).single();\n        if (error) throw error;\n        return data?.stream_url || null;\n    }\n    // =====================================================\n    // PLAYLIST OPERATIONS\n    // =====================================================\n    async getPlaylists(limit = 50, offset = 0) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).eq('visibility', 'public').order('created_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        if (error) throw error;\n        return data;\n    }\n    async getUserPlaylists(userId) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).eq('creator_id', userId).order('updated_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async getPlaylist(id) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*),\n        playlist_tracks(\n          position,\n          track:tracks(\n            *,\n            artist:artists(*),\n            album:albums(*)\n          )\n        )\n      `).eq('id', id).single();\n        if (error) throw error;\n        return data;\n    }\n    async createPlaylist(playlistData) {\n        const { data, error } = await this.supabase.from('playlists').insert(playlistData).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async addTrackToPlaylist(playlistId, trackId, position) {\n        // Get the next position if not provided\n        if (!position) {\n            const { data: maxPosition } = await this.supabase.from('playlist_tracks').select('position').eq('playlist_id', playlistId).order('position', {\n                ascending: false\n            }).limit(1).single();\n            position = (maxPosition?.position || 0) + 1;\n        }\n        const { error } = await this.supabase.from('playlist_tracks').insert({\n            playlist_id: playlistId,\n            track_id: trackId,\n            position,\n            added_by: (await this.getCurrentUser())?.id || null\n        });\n        if (error) throw error;\n    }\n    // =====================================================\n    // USER LIBRARY OPERATIONS\n    // =====================================================\n    async getUserLibrary(userId) {\n        const { data, error } = await this.supabase.from('user_library').select(`\n        *,\n        track:tracks(\n          *,\n          artist:artists(*),\n          album:albums(*)\n        ),\n        album:albums(\n          *,\n          artist:artists(*)\n        ),\n        artist:artists(*),\n        playlist:playlists(\n          *,\n          creator:users!creator_id(*)\n        )\n      `).eq('user_id', userId).order('added_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async addToLibrary(libraryItem) {\n        const { data, error } = await this.supabase.from('user_library').insert(libraryItem).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async removeFromLibrary(userId, itemId, itemType) {\n        const { error } = await this.supabase.from('user_library').delete().eq('user_id', userId).eq(`${itemType}_id`, itemId);\n        if (error) throw error;\n    }\n    // =====================================================\n    // PLAY HISTORY OPERATIONS\n    // =====================================================\n    async addPlayHistory(historyItem) {\n        const { data, error } = await this.supabase.from('user_play_history').insert(historyItem).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async getUserPlayHistory(userId, limit = 50) {\n        const { data, error } = await this.supabase.from('user_play_history').select(`\n        *,\n        track:tracks(\n          *,\n          artist:artists(*),\n          album:albums(*)\n        )\n      `).eq('user_id', userId).order('played_at', {\n            ascending: false\n        }).limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    // =====================================================\n    // SERVICE CONNECTION OPERATIONS\n    // =====================================================\n    async getUserServices(userId) {\n        const { data, error } = await this.supabase.from('user_services').select('*').eq('user_id', userId).eq('is_active', true);\n        if (error) throw error;\n        return data;\n    }\n    async connectService(serviceData) {\n        const { data, error } = await this.supabase.from('user_services').upsert(serviceData, {\n            onConflict: 'user_id,service_id'\n        }).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async disconnectService(userId, serviceId) {\n        const { error } = await this.supabase.from('user_services').update({\n            is_active: false\n        }).eq('user_id', userId).eq('service_id', serviceId);\n        if (error) throw error;\n    }\n    // =====================================================\n    // SEARCH OPERATIONS\n    // =====================================================\n    async searchAll(query, limit = 20) {\n        const [tracks, albums, artists, playlists] = await Promise.all([\n            this.searchTracks(query, limit),\n            this.searchAlbums(query, limit),\n            this.searchArtists(query, limit),\n            this.searchPlaylists(query, limit)\n        ]);\n        return {\n            tracks,\n            albums,\n            artists,\n            playlists,\n            query,\n            total: tracks.length + albums.length + artists.length + playlists.length\n        };\n    }\n    async searchPlaylists(query, limit = 20) {\n        const { data, error } = await this.supabase.from('playlists').select(`\n        *,\n        creator:users!creator_id(*)\n      `).ilike('title', `%${query}%`).eq('visibility', 'public').limit(limit);\n        if (error) throw error;\n        return data;\n    }\n    constructor(){\n        this.supabase = (0,_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    }\n}\n// Export a singleton instance\nconst supabaseService = new SupabaseService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase/service.ts\n");

/***/ })

};
;